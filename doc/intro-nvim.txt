                                 intro.nvim ☄️                     *intro.nvim*
==============================================================================
                  Another `intro` or `start screen` plugin for
                                   `Neovim`
Table of contents                                             *intro.nvim-toc*
------------------------------------------------------------------------------
  1. Introduction.....................................|intro.nvim-introduction|
  2. Installation.....................................|intro.nvim-installation|
  3. Usage...................................................|intro.nvim-usage|
  4. Presets...............................................|intro.nvim-presets|
  5. Components.........................................|intro.nvim-components|
  6. Colors.................................................|intro.nvim-colors|
  7  Animations.........................................|intro.nvim-animations|
  8. Helper functions......................................|intro.nvim-helpers|

Introduction                                         *intro.nvim-introduction*
------------------------------------------------------------------------------

               ██████▒▒░░      ⠛⣿⠛ ⣿⣄  ⣿ ⠛⠛⣿⠛⠛ ⣾⠛⠛⣷ ⣾⠛⠛⣷
               ██░░▒▒██▒▒░░     ⣿  ⣿ ⣿ ⣿   ⣿   ⣿⠶⠶⠟ ⣿  ⣿
               ██░░▒▒████▒▒░░   ⣿  ⣿ ⣿ ⣿   ⣿   ⣿⠷   ⣿  ⣿
               ██▒▒▒▒░░▒▒▒▒░░  ⣤⣿⣤ ⣿  ⠙⣿   ⣿   ⣿ ⢷  ⢿⣤⣤⡿ .nvim
               ██████▒▒▒▒░░    
               ▒▒▒▒▒▒▒▒░░      `Yet another start screen plugin`

A `start screen` plugin for those who want next level customization in their
start screen without the hassle of setting everything up themselves. 

Key features -
  1. `Component` based system.
  2. Easily `align` the text, both vertically & horizontally.
  3. Various text coloring methods including `gradients`.
  4. Easy coloring of various parts of a text.
  5. `highlights` and `text` based animation support.

And much more!

Installation                                         *intro.nvim-installation*
------------------------------------------------------------------------------
Use your favorite plugin manager to install this plugin.

━━ Lazy ─────────────────────────────────────────────────────────────────────╮
>
  {
    "OXY2DEV/intro.nvim",
    -- Devicons are used for file icons  
    dependencies = {
      -- If you want to use icons
      "nvim-web-devicons"
    },

    -- Configuration file
    config = function()
      require("plugin/intro")
    end
  }
<
─────────────────────────────────────────────────────────────────────────────╯

To use the plugin call the *setup()* function.

━━ intro.lua ────────────────────────────────────────────────────────────────╮
>
  require("intro").setup();
<
─────────────────────────────────────────────────────────────────────────────╯

Usage                                                       *intro.nvim-usage*
------------------------------------------------------------------------------
                               setup({config})

Usage ~
━━ intro.lua ────────────────────────────────────────────────────────────────╮
>
  require("intro").setup({config});
<
─────────────────────────────────────────────────────────────────────────────╯

Description ~
  Setup function. All your *components* , *highlights* & *animations* reside
  inside this function.

Structure ~

━━ intro.lua ────────────────────────────────────────────────────────────────╮
>
  {
    preset = "",                     -- string | nil

    anchors = {
      position = "",                 -- string | nil

      textStyle = {},                -- table | nil
      cornerStyle = {}               -- table | nil
    },

    components = {},                 -- table | nil
    globalHighlights = {},           -- table | nil

    animations = {
      textBased = {},                -- table | nil
      highlightBased = {},           -- table | nil

      startDelay = 0,                -- integer | nil
      updateDelay = 0                -- integer | nil
    }
  }
<
─────────────────────────────────────────────────────────────────────────────╯

Parameters ~
  {config} `table | nil`
  Table containing all the properties of your start screen.

  It contains the following properties,
    {preset} `string | nil` 
    Name of the preset to be used. Presets are searched in the `presets.lua`
    file.

    NOTE: Custom preset support is a `work in progress` feature.


    {anchors} `table | nil`
    Define setting for the anchor popups. It is meant to show the `full path`
    of the file the `Cursor` is on.

    Only has effect when a component with the type `recents` is used.

    It has the following properties
      {position} `string | nil`
      Defines where to put the popup. Values can be either `top` or `bottom`.

      {textStyle} `table | nil`
      Sets the style for the text of the Anchor.

      {cornerStyle} `table | nil`
      Sets the style for the edge of the Anchor.

      {corner} `string | nil`
      String used for showing the edge of the popup.

    Usage
    ╭ intro.lua ────────────────────────────────────────────────────────────╮
>
      anchors = { -- These are the default values
	position = "bottom",

	textStyle = { fg = "#11ffee", bg = "#ffffff" },
	cornerStyle = { fg = "#ffffff", bg = "#11ffee" },

	corner = " "
      }
<
    ╰───────────────────────────────────────────────────────────────────────╯


    {components} `table | nil`
    Table containing all the components used in the start screen.

    Check the entire list of `components` & their setup in
    `intro.nvim-components`

    Example:
    ╭ intro.lua ────────────────────────────────────────────────────────────╮
>
      components = {
	"A normal line",
	{
	  lines = {
	    "One line", "Two line",  "Three line"
	  },

	  colors = "highlight_group"
	},
	{
	  line = {
	    "A long line with gradients"
	  },

	  colors = {
	    { "group_1", "group_2", "group_3" }
	  }
	}
      }
<
    ╰───────────────────────────────────────────────────────────────────────╯

    NOTE: Has no effect if preset is set.


    {globalHighlights} `table | nil`
    Table containing all the custom highlight groups you use.

    `globalHighlights` table has key value pairs for the highlight groups.

    Each of the keys are sent into `nvim_set_hl()` as the highlight group
    name(a `Intro_` prefix to avoid overwriting normal highlight groups)
    and the values corresponding to that name is sent as the option.

    Example:
    ╭ intro.lua ────────────────────────────────────────────────────────────╮
>
      globalHighlights = {
        "highlight_one" = { bg = "#1e1e2e", fg = "#BAC2DE" },
        "highlight_two" = { bg = "#BAC2DE", fg = "#1e1e2e" },
      }
<
    ╰───────────────────────────────────────────────────────────────────────╯


    {animations} `table | nil`
    This property has all the animations defined inside it. It has the 
    following properties,
      {highlighBased} `table | nil`
      This takes various highlight group names and the values to animate
      through. The structure of this table is as follows,
    
      ╭ intro.lua ──────────────────────────────────────────────────────────╮
>
        {
  	  "highlight_one" = {
	    { fg = "#9399B2" }, { fg = "#A6ADC8" }, { fg = "#BAC2DE" }
	  }
        }
<
      ╰─────────────────────────────────────────────────────────────────────╯

      Note: Animations can sometimes cause `Neovim` to become slow.

      {textBased} `table | nil`
      Text based animation table. `Work in progress`
      The configuration table should look like this,

      ╭ intro.lua ──────────────────────────────────────────────────────────╮
>
        {
	  {
	    mode = "line",

	    line = 1,
	    values, {
	      "A", "A ", "A t", "A te", "A tex", 
	      "A text",
	      "A tex", "A te", "A t", "A ", "A"
	    }
	  },
	  {
	    mode = "virt_text"

	    x = 0, y = 0,
	    values, {
	      "A", "A ", "A t", "A te", "A tex", 
	      "A text",
	      "A tex", "A te", "A t", "A ", "A"
	    }
	  },
        }
<
      ╰─────────────────────────────────────────────────────────────────────╯

      {delay} `integer | nil`
      Amount of `miliseconds` to wait before running the animation loop
      
      Example:
      ╭ intro.lua ──────────────────────────────────────────────────────────╮
>
        { animations = { delay = 0 } }
<
      ╰─────────────────────────────────────────────────────────────────────╯
    
      {updateDelay} `integer | nil`
      Time gap between each frame being rendered(in `ms`).
      
      Example:
      ╭ intro.lua ──────────────────────────────────────────────────────────╮
>
        { animations = { updateDelay = 100 } }
<
      ╰─────────────────────────────────────────────────────────────────────╯


Presets                                                   *intro.nvim-presets*
------------------------------------------------------------------------------
`intto.nvim` provides various presets to use. Currently available presets,
  1. nvim_color               
  2. nvim_color_animated                                      ／l、 
                                                            （ﾟ､ ｡ ７   
  3. cat                                                      l  ~ヽ  
  4. cat_green                                                じしf_,)ノ
  5. cat_blue

Components                                             *intro.nvim-components*
------------------------------------------------------------------------------
`intro.nvim` provides components so that users can apply styles to text
Easily. Currently we have the following components,
  1. Banner
  2. Recents
  3. Time

Defining a component ~
  {type} `string | nil`
  Type defines what component a perticular table is. For example if you have
  something like this,
  
  ╭ Component ───────────────────────────────────────────────────────────────╮
>
    {
      lines = {
	"A line",
	"Another line"
      },

      width = 0.8,
      useIcons = false,
      length = 5,

      theme = "Normal"
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯

  The plugin wouldn't know whether this is a `banner` component or a `recents`
  component or if it's a `time` component.

  By using `type = "banner"` you can tell the plugin to ignore everything 
  other then `lines`.

  The default value for this is `banner`.


Banner ~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                              `type = "banner"`
Banner is used to define a group of line that have a specific style to them.
So, you don't have to write the color names, alignments etc. for every line.

It's structure looks something like This

━━ Banner ───────────────────────────────────────────────────────────────────╮
>
  {
    type = "banner",

    lines = {
      "A single line",
      { "A ", "few ", "words" }
    },

    align = {
      "center",
      "left"
    }

    colors = {
      "highlight_group",
      { "gradient_1", "gradient_2", "gradient_3" }
    },
    secondayColors = {
      nil,
      { nil, "Special", nil }
    },
  }
<
────────────────────────────────────────────────────────────────────────────╯

Properties ~
  {lines} `table | nil`
  The lines of text to show on the screen

  {align} `table | string | nil`
  Defines the horizontal alignments of the lines.

  When the value is a string it is applied to all the lines. If it is a
  table then it is applied based on the `index` of the line. If a line
  doesn't have an alignment then the last value in the table is used.

  Default value is `center`.

  Possible values are `left`, `right` and `center`.

  Example
  ╭ Align ──────────────────────────────────────────────────────────────────╮
>
   {
     lines = {
       "A line",
       { "Another", "line" },
       "Another one"
     },

     align = {
       "left", "right", "center"
     }
   }
<
  ╰─────────────────────────────────────────────────────────────────────────╯

  `╭` Output `─────────────────────────────────────────────────────────────────╮`
  `│` A line                                                                  `│`
  `│`                                                            Another line `│`
  `│`                              Another one                                `│`
  `╰─────────────────────────────────────────────────────────────────────────╯`

  {colors} `table | string | nil`
  The name of the `highlight group` to use as the color. More information
  about coloring is available in the `intro.nvim-colors` section.

  This property defines the coloring of the lines. The coloring can be done
  in many ways such as
    1. String
       When the value is a string it will use this highlight group for all 
       the lines.

    2. List(a lua table with highlight group names)
       When the value is a list the component will will apply the color
       based off of the index of the line.

       Example
       ╭ Lines ──────────────────────────────────────────────────────────────╮
>
        {
	  lines = {
	    "A line",
	    { "Another", "line" },
	    "Another one"
	  },

	  colors = {
	    "grouo_1",
	    "Special"
	  }
        }
<
       ╰─────────────────────────────────────────────────────────────────────╯

       In this case the first line will use `group_1` for highlights,
       the second line will use `Special`.

       However, there is no highlight group for the last line. In this case,
       it will use the last highlight group for it's color.

       NOTE If you want to bypass this behavior just leave an empty string

    3. List within a list
       When the value is a list within a list then the line will have a
       gradient applied to it.

       Example
       ╭ Gradients ──────────────────────────────────────────────────────────╮
>
         {
	   { "group_1", "group_2", "group_3" }
	 }
<
       ╰─────────────────────────────────────────────────────────────────────╯

       NOTE More information about gradients are in `intro.nvim-colors` section

  You can also use all 3 of them together if you want.


  {secondaryColors} `table | nil`                              `list inside list`
  This is a table containing various highlight groups that will be applied
  to a line after the main color(ddfined in {colors}) is applied.
  
  This is useful when you have different colors in the same line.

  {secondaryColors} are `line index` based so if you want to skip a line just
  set it to `nil`.

  You can currently define `secondaryColors` in 2 ways.
  1. Set position
     In this case you specify a `from` and a `to` value and a `highlight`
     which can be a string or a table.

     Example
     ╭ SecondaryColors ──────────────────────────────────────────────────────╮
>
       secondaryColors = {
	 {
	   {
	     from = 0, to = 5, highlight = "second_1"
	   },
	   {
	     from = 6, to = 9, highlight = "second_2"
	   },
	 }
       }
<
     ╰───────────────────────────────────────────────────────────────────────╯
  2. Without a set position
     If you use a `table` in `lines` you can use this method which is much
     simpler

     Example
     ╭ SecondaryColors ──────────────────────────────────────────────────────╮
>
       lines = {
	 { "A", "Few", "Lines" }
       },
       secondaryColors = {
	 {
	   "grouo_1", "group_2", "group_3"
	 }
       }
<
     ╰───────────────────────────────────────────────────────────────────────╯

  You can combine them too if you want.


  {gradientRepeat} `boolean | table | nil`
  Determines whether gradients should repeat or not.

  When the value is a boolean it will apply to both `colors` and 
  `secondaryColors`.
  When the value is a table it will use the lines index and fallback to the
  last entry in the table if the value is `bil`.

  Example
  ╭ gradientRepeat ──────────────────────────────────────────────────────────╮
>
    -- It can be a boolean
    gradientRepeat = true,

    -- It can be a list of boolean
    gradientRepeat = { true, false, true },

    -- It can also be a single table
    gradientRepeat = {
      colors = true,
      secondaryColors = false
    },

    -- It can also be a list of tables too
    gradientRepeat = {
      {
	colors = false,
      },
      {
	secondaryColors = true
      }
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯

Recents ~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                             `type = "recents"`

Recents is a component that shows the recently accessed files from `oldfiles`.
It also sets up a keymap to easily open them.

Properties ~
  {style} `string | nil`
  Changes the style of the list. Can either be `list` or `centered`.

  Example
  ╭ Recents ─────────────────────────────────────────────────────────────────╮
>
    {
      style = "list" -- or "centered"
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯


  {width} `integer | float | nil`
  Defines the width of the list. Has no effect if style is `centered`.

  The default width is `50%` of the window width.

  Example
  ╭ Recents ─────────────────────────────────────────────────────────────────╮
>
    {
      width = 0.5,
      
      -- Also supports integer values
      width = 39
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯


  {useIcons} `boolean | nil`
  When `true` File icons with color will be visible. 
  NOTE Requires `nvim-web-devicons`

  Default is `false`

  ╭ intro.nvim ──────────────────────────────────────────────────────────────╮
>
    dependencies = {
      "nvim-web-devicons"
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯
  
  In the component table you should set {useIcons} to `true`.

  ╭ Recents ─────────────────────────────────────────────────────────────────╮
>
    {
      useIcons = true
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯


  {entryCount} `integer | nil`
  Number of entries to show.

  If for some reason(e.g. fresh linux install) the number of entries in 
  `oldfiles` is less than this number you will see entries with `Empty` 
  as the file name.

  Default number of entries is 5.

  Usage
  ╭ Recents ─────────────────────────────────────────────────────────────────╮
>
    {
      entryCount = 5
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯


  {keymap} `string | nil`
  The key combination to use for opening the file.

  When the `Cursor` is placed on top of one of the entries if you use the key
  combination it would open the file and close `intro.nvim`.

  Default is `<leader><leader>`

  Usage
  ╭ Recents ─────────────────────────────────────────────────────────────────╮
>
    {
      keymap = "<Space><Space>"
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯

  Check the keycodes with `:h keycodes` for the full list of available keys.


  {useAnchors} `boolean | nil`
  Wether to show the anchor popup on hover. Default is `true`.

  NOTE This is component specific. So, if you use this component multiple
       time you can choose which one of them will show the popup.
  
  Usage
  ╭ Recents ─────────────────────────────────────────────────────────────────╮
>
    {
      useAnchors = false
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯

  {dir} `string | boolean | nil`
  Use this to only show the recents files of a specific directory.

  When set to `false` loads `oldfiles`(`default` behavior).
  When set to `true` loads files of the current directory.
  When set to a `string` only shows entries that have that path.
  
  NOTE It currently doesn't support `relative` paths. So, you will need to use
       the `absolute` path.
  
  Usage
  ╭ Recents ─────────────────────────────────────────────────────────────────╮
>
    {
      -- Boolean value
      dir = false,

      -- String value
      dir = ".config/nvim/"
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯

  {colors} `table | nil`
    {name} `table | string | nil`
    Highlight group name(s) for the File names.

    {number} `table | string | nil`
    Highlight group name(s) for the entry number.

    {whiteSpaces} `table | string | nil`
    Highlight group name(s) for the spaces used.

    Usage
    ╭ Recents ───────────────────────────────────────────────────────────────╮
>
      {
        colors = {
	  name = "Special",
	  number = { "group_1", "group_2" },

	  whiteSpaces = { { "gradient_1", "gradient_2", "gradient_3" } }
        }
      }
<
    ╰────────────────────────────────────────────────────────────────────────╯


Colors                                                       *intro.nvim-colors*
------------------------------------------------------------------------------

This section explains how the coloring of text works. And how different
color related properties work. Plus a bit of technical detail about it.

{colors}
  This property defines the main color of a line. It can be a `string` which
  is used as a single solid color or a `table` which is considered a
  gradient.

  For example
  ╭ Colors ──────────────────────────────────────────────────────────────────╮
>
    colors = {
      "red", "green", "blue"
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯

  This will result in the first line being red, the second line being green
  and the third line being blue.

  On the other hand
  ╭ Colors ──────────────────────────────────────────────────────────────────╮
>
    colors = {
      "red", 
      { "red", "orange", "yellow" }, 
      "blue"
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯
  
  This will result in the first and last line being red and blue. On the
  other hand the second line will be a gradient of red, orange and yellow.

  Colors are applied first and can be changed with secondaryColors.
  This is on purpose.

{secondaryColors}
  This property defines a list of colors that will replace the value of
  {colors} in specified locations.

  It is meant to completely replace {colors} vlaues on specific places.

  Colors          ██████████
  secondaryColors ░░░░

  Result          ░░░░██████

  `secondayColors` can be defined in two ways.
    1. With a specific range of `Index`
    ╭ secondaryColors ───────────────────────────────────────────────────────╮
>
      {
	text = "A long line",

        secondaryColors = {
    	  {
  	    from = 0, to = 5,
	    highlight = "hl_1"
	  },
	  {
	    from = 6, to = 9,
	    highlight = {
	      "hl_2", "hl_3", "hl_4"
	    }
	  }
        }
      }
<
    ╰────────────────────────────────────────────────────────────────────────╯
    
    This will apply highlights like this

    Text                      A   l o n g   l i n  e
    Index(used by Neovim)    0 1 2 3 4 5 6 7 8 9 10

    From, to value            0 1 2 3 4 5 6 7 8 9  10
                          
    Colors                    █ █ █ █ █ █ █ █ █ █  █
    secondaryColors           ▆ ▆ ▆ ▆ ▆ ▆ ░ ▒ ▓ ▓

    Result                    ▆ ▆ ▆ ▆ ▆ ▆ ░ ▒ ▓ ▓  █

    Which makes the line look something like this
                                 A long line
				 ▆▆▆▆▆▆░▒▓▓█
                                 ├────┘│┆┊┊┃
			  hl_1 ──┘     │┆├┘┃
                                hl_2 ──┘┆┊ ┃
				hl_3 ┄┄┄┘┊ ┃
				hl_4 ┈┈┈┈┘ ┃
	      	 Default color ━━━━━━━━━━━━┛

    NOTE {secondaryColors} loops through the list so if you have multiple
         `secondaryColors` on a specific position only the `last` one will
	 be visible.


Repeating gradients ~
Originally all gradients were considered repeating. But, after thinking
about it I realized it would be better to add a configuration option for
this instead.

If you are feeling confused about what I mean by `repeating` gradients, here's
some information about it.

Let's say you have a component that look like this,

━━ gradients.lua ────────────────────────────────────────────────────────────╮
>
  {
    text = "A very very long line",
    color = { "hl_2", "hl_3" }
  }
<
─────────────────────────────────────────────────────────────────────────────╯

`╭` Code Explanation `──────────────────────────────────────────────────────────╮`
`│` If you are wondering why the table has {text} instead of {lines} and       `│`
`│` {color} instead of {colors}. It's because to make the rendering of lines   `│`
`│` easier the plugin turns all the lines of text into these small `tables`.     `│`
`│`                                                                            `│`
`│` This makes finding bug a bit easier, it also ensures that the plugun only  `│`
`│` needs to work with a specific lines information without needing to filter  `│`
`│` it every time. It is also meant to reduce any lags that may happen during  `│`
`│` screen refreshes                                                           `│`
`╰────────────────────────────────────────────────────────────────────────────╯`

Here the line is `20` characters long. On the other hand the {color} property
has 2 `highlight groups.` So, what do we use to color the text from the 3rd
character? Do we only use the last color? Do we repeat the colors?

For this reason {gradientRepeat} exists. This allows you to specify whether
the gradient should repeat or not.

Behavior when different values are set,

╭─────────┬──────────────────────────────────────────────────────────────────╮
│ Value   │ Result                                                           │
├─────────┼──────────────────────────────────────────────────────────────────┤
│ true    │ ░░▒▒▓▓░░▒▒▓▓░░▒▒▓▓░░▒▒▓▓░░▒▒▓▓░░▒▒▓▓░░▒▒▓▓░░▒▒▓▓░░▒▒▓▓░░▒▒▓▓░░▒▒ │
│ false   │ ░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ │
╰─────────┴──────────────────────────────────────────────────────────────────╯

Additionally, to provide more `control` over this behavior it also provides
a table which allows the user to specify where which behavior should be
used.

╭─ Table structure ──────────────────────────────────────────────────────────╮
>
  gradientRepeat = {
    colors = true,
    secondayColors = false
  }
<
╰────────────────────────────────────────────────────────────────────────────╯

`╭` Code Explanation `──────────────────────────────────────────────────────────╮`
`│` You can also customize the behavior for the main `color` and the             `│`
`│` `secondayColors`.                                                            `│`
`│`                                                                            `│`
`│` The default is `false` for both cases.                                       `│`
`╰────────────────────────────────────────────────────────────────────────────╯`


Animations                                             *intro.nvim-animations*
------------------------------------------------------------------------------

This section explains how animations work, what the various properties do
and how to make your own animations.

This plugin uses `vim.loop.new_timer()` (`vim.uv.new_timer()` in the nightly 
version) under the hood for making animations.

As using too many `timers` may negatively impact Neovim's performance this
plugin only uses a `single` loop to handle all the animations. The loop
stops when all the animations are finished.

For this reason, this plugin lacks the ability to handle different types
of delay. To make up for this the plugin provides a way to skip `framees`
essentially mimicking this behavior.

`╭` Frames `────────────────────────────────────────────────────────────────────╮`
`│` Every iteration of the `animation loop` is called a `frame`.                   `│`
`│`                                                                            `│`
`│` On every `frame` the plugin will loop through all the `animationTables` and    `│`
`│` decide whether to play a specific animation. Then it will check which      `│`
`│` `value` to apply on that `frame`.                                              `│`
`╰────────────────────────────────────────────────────────────────────────────╯`

You can specify the amount of time gap between 2 frames using the
{updateDelay} prperty in the {animations} table. So, if you have it set to
something like 100. Then the loop will run every `100 miliseconds.`

A large value in {updateDelay} will result in a slower animation speed. On
the other hand, a smaller value will result in a smoother & faster animation
speed.

─────────────────────────────────────────────────────────────────────────────╮
NOTE A very low {updateDelay} may `Crash` Neovim                               │
─────────────────────────────────────────────────────────────────────────────╯
─────────────────────────────────────────────────────────────────────────────╮
The plugin stores the number of completed `frames`. As such if you make the
value large enough it will reach the `integer sizes limit`(basically the
biggest number your computer can store).

In the next frame when the plugin will attempt to increase the number again
it will become a `negative number` therefore becoming less than 0. This could
cause issues and strange behavior to occur.

This can also occur if you leave a looping animation running for too long.
─────────────────────────────────────────────────────────────────────────────╯

The default value for {updateDelay} is `100`.

You can also specify a delay before the `animation loop` starts. This is
useful if you have plugins that need to be run before or if you don't want
to miss the entire animation. This is specified by the {delay} property in
the {animations} table.

The default value for {delay} is `500`.

Animation types ~


There are 2 types of animation available in this plugin. They are -
  1. Text based animations
  2. Highlight group based animations

`─────────────────────────────────────────────────────────────────────────────╮`
◆ Text based animations                                                      `│`
`─────────────────────────────────────────────────────────────────────────────╯`
This plugin provides a way to change text on the fly through it's animations.

You can add text on specific `coordinates` or on specific `lines`. Originally
the plugin used `virtual text` for this which could not replace texts if
a character was empty(or if it was a space) in the virtual text. But now
you can also specify a line whose content should be changed.

Right now, the plugin will replace the entire line with the new text but in
the future it may be possible to only change part of the line(without using
virtual texts).

Currently, you can't specify any highlight groups or coloring of the lines
so I plan to add them in the future along with various other features.

Currently planned features ~
  1. Provide ways to apply {color} & {secondaryColors} to the applied text.
  2. Provide a way to horizontally align the text along with some banner
     properties(e.g. {width}, {align} etc.)

  3. Allow the `position` of `virtual texts` to be changed on the fly.
  4. Providing various callbacks for animations(e.g. onComplete, onStart,
     onRender etc.)
  5. Allowing multiple lines to be part of the same `animationTable` and
     providing ways to control multiple lines position at once.
  6. Creating preset functions for the animations.

And much more.

`─────────────────────────────────────────────────────────────────────────────╮`
◆ Gighlight group based animations                                           `│`
`─────────────────────────────────────────────────────────────────────────────╯`
This plugin provides an easy way to change the properties of a highlight
group. This can be used to make various animations.

Helper functions                                          *intro.nvim-helpers*
------------------------------------------------------------------------------

This section explains the various `helper functions` provided by the plugin,
how to use them, what they do and what their output looks like.

Helper functions are stored in the `helpers.lua` file.


                      gradientSteps({from}, {to}, {steps})

Description ~
Linearly interpolates between 2 colors and outputs a `list` of colors that
create a gradient between the 2 colors. The length of the list is defined
by the amount of {steps}.

Parameters ~
╭───────────┬─────────────────────────┬──────────────────────────────────────╮
│   Name    │            Type         │                                      │
├───────────┼─────────────────────────┼──────────────────────────────────────┤
│ {from}    │   `table`                 │   mandatory                          │
│ {to}      │   `table`                 │   mandatory                          │
│ {steps}   │   `integer | nil`         │   `optional`                           │
╰───────────┴─────────────────────────┴──────────────────────────────────────╯

Output ~
  {list}       `table`

Usage ~
╭─ gradientSteps ────────────────────────────────────────────────────────────╮
>
  local colors = helpers.gradientSteps(
    {
      r = 10, g = 10, b = 10
    },
    {
      r = 255, g = 255, b = 255
    },
    5
  );

  -- Outputs a 5 step gradient from #101010 to #FFFFFF
  vim.print(colors);
<
╰────────────────────────────────────────────────────────────────────────────╯
╭─ Output ───────────────────────────────────────────────────────────────────╮
│ { "#3b3b3b", "#6c6c6c", "#9d9d9d", "#cecece", "#ffffff" }                  │
╰────────────────────────────────────────────────────────────────────────────╯


      transition({groupName}, {from}, {to}, {steps}, {animationOptions})

Description ~
Creates all the frames necessary for a smooth transition between 2 colors
and returns a `highlightBased` animation table.

Optionally allows custom animation configurations to be applied. It uses
`gradientSteps` under the hood.

WARN
├────────────────────────────────────────────────────────────────────────────╮
│ Subject to breaking changes.                                               │
│                                                                            │
│ This function is `incomplete`. It's functionality, parameters, behavior is   │
│ meant to `change` in the funture.                                            │
╰────────────────────────────────────────────────────────────────────────────╯

Parameters ~
╭─────────────────────┬─────────────────────────┬────────────────────────────╮
│         Name        │          Type           │                            │
├─────────────────────┼─────────────────────────┼────────────────────────────┤
│ {groupName}         │   `string`                │   mandatory                │
│ {from}              │   `list`                  │   mandatory                │
│ {to}                │   `list`                  │   mandatory                │
│ {steps}             │   `integer`               │   mandatory                │
│ {animationOptions}  │   `table | nil`           │   `optional`                 │
╰─────────────────────┴─────────────────────────┴────────────────────────────╯

Output ~
  {animationTable}       `table`

Usage ~
╭─ transition ───────────────────────────────────────────────────────────────╮
>
  local effect = helpers.transition(
    "custom_hl",
    { 10, 10, 10 },
    { 255, 255, 255 },
    5,
    nil
  );

  -- Outputs a 5 step transition effect
  vim.print(effect);
<
╰────────────────────────────────────────────────────────────────────────────╯
╭─ Output ───────────────────────────────────────────────────────────────────╮
│ {                                                                          │
│   groupName = "custom_hl",                                                 │
│   values = { "#3b3b3b", "#6c6c6c", "#9d9d9d", "#cecece", "#ffffff" }       │
│ }                                                                          │
╰────────────────────────────────────────────────────────────────────────────╯


 vim:tw=77:ts=8:noet:ft=help:norl:
