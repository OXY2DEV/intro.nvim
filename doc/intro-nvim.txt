NOTE Documentation is deprecated. I will finish it once thw plugin
is stable enough

                                 intro.nvim ☄️                     *intro.nvim*
==============================================================================
                  Another `intro` or `start screen` plugin for
                                   `Neovim`
Table of contents                                             *intro.nvim-toc*
------------------------------------------------------------------------------
  1. Introduction.....................................|intro.nvim-introduction|
  2. Installation.....................................|intro.nvim-installation|
  3. Usage...................................................|intro.nvim-usage|
  4. Presets...............................................|intro.nvim-presets|
  5. Components.........................................|intro.nvim-components|
  6. Helpers...............................................|intro.nvim-helpers|
  7. TODOs.....................................................|intro.nvim-wip|

Introduction                                         *intro.nvim-introduction*
------------------------------------------------------------------------------

               ██████▒▒░░      ⠛⣿⠛ ⣿⣄  ⣿ ⠛⠛⣿⠛⠛ ⣾⠛⠛⣷ ⣾⠛⠛⣷
               ██░░▒▒██▒▒░░     ⣿  ⣿ ⣿ ⣿   ⣿   ⣿⠶⠶⠟ ⣿  ⣿
               ██░░▒▒████▒▒░░   ⣿  ⣿ ⣿ ⣿   ⣿   ⣿⠷   ⣿  ⣿
               ██▒▒▒▒░░▒▒▒▒░░  ⣤⣿⣤ ⣿  ⠙⣿   ⣿   ⣿ ⢷  ⢿⣤⣤⡿ .nvim
               ██████▒▒▒▒░░    
               ▒▒▒▒▒▒▒▒░░      `Yet another start screen plugin`

A `start screen` plugin for those who want next level customization in their
start screen without the hassle of setting everything up themselves. 

Key features -
  1. `Component` based system.
  2. Easily `align` the text, both vertically & horizontally.
  3. Various text coloring methods including `gradients`.
  4. Easy coloring of various parts of a text.
  5. `highlights` and `text` based animation support.

And much more!

Installation                                         *intro.nvim-installation*
------------------------------------------------------------------------------
Use your favourite plugin manager to install this plugin.

━━ Lazy ─────────────────────────────────────────────────────────────────────╮
>
  {
    "OXY2DEV/intro.nvim",
    -- Devicons are used for file icons  
    dependencies = {
      -- If you want to use icons
      "nvim-web-devicons"
    },

    -- Configuration file
    config = function()
      require("plugin/intro")
    end
  }
<
─────────────────────────────────────────────────────────────────────────────╯

To use the plugin call the *setup()* function.

━━ intro.lua ────────────────────────────────────────────────────────────────╮
>
  require("intro").setup({ preset = "nvim_color" })
<
─────────────────────────────────────────────────────────────────────────────╯

Usage                                                       *intro.nvim-usage*
------------------------------------------------------------------------------
                               setup({config})

Usage ~
━━ intro.lua ────────────────────────────────────────────────────────────────╮
>
  require("intro").setup({config});
<
─────────────────────────────────────────────────────────────────────────────╯

Description ~
  Setup function. All your *components* , *highlights* & *animations* reside
  inside this function.

Structure ~

━━ intro.lua ────────────────────────────────────────────────────────────────╮
>
  {
    anchors = {
      position = "",                 -- string | nil

      textStyle = {},                -- table | nil
      cornerStyle = {}               -- table | nil
    },

    components = {},                 -- table | nil
    globalHighlights = {},           -- table | nil

    animations = {
      textBased = {},                -- table | nil
      highlightBased = {},           -- table | nil

      startDelay = 0,                -- integer | nil
      updateDelay = 0                -- integer | nil
    }
  }
<
─────────────────────────────────────────────────────────────────────────────╯

Parameters ~
  {config} `table | nil`
  Table containing all the properties of your start screen.

  It contains the following properties,
    {preset} `string | nil` 
    Name of the preset to be used. Presets are searched in the `presets.lua`
    file.

    NOTE: Custom preset support is a `work in progress` feature.


    {anchors} `table | nil`
    Define setting for the anchor popups. It is meant to show the `full path`
    of the file the `Cursor` is on.

    Only has effect when a component with the type `recents` is used.

    It has the following properties
      {position} `string | nil`
      Defines where to put the popup. Values can be either `top` or `bottom`

      {textStyle} `table | nil`
      Sets the style for the text of the Anchor

      {cornerStyle} `table | nil`
      Sets the style for the edge of the Anchor

    Usage
    ╭ intro.lua ────────────────────────────────────────────────────────────╮
>
      anchors = {
	position = "bottom",

	textStyle = { fg = "#11ffee", bg = "#ffffff" },
	cornerStyle = { fg = "#ffffff", bg = "#11ffee" }
      }
<
    ╰───────────────────────────────────────────────────────────────────────╯


    {components} `table | nil`
    Table containing all the components used in the start screen.

    Check the entire list of `components` & their setup in
    *intro.nvim-components*

    Example:
    ╭ intro.lua ────────────────────────────────────────────────────────────╮
>
      components = {
	"A normal line",
	{
	  lines = {
	    "One line", "Two line",  "Three line"
	  },

	  colors = "highlight_group"
	},
	{
	  line = {
	    "A long line with gradients"
	  },

	  colors = {
	    { "group_1", "group_2", "group_3" }
	  }
	}
      }
<
    ╰───────────────────────────────────────────────────────────────────────╯

    NOTE: Has no effect if preset is set.


    {globalHighlights} `table | nil`
    Table containing all the custom highlight groups you use.

    `globalHighlights` table has key value pairs for the highlight groups.

    Each of the keys are sent into `nvim_set_hl()` as the highlight group
    name(a `Intro_` prefix to avoid overwriting normal highlight groups)
    and the values corresponding to that name is sent as the option.

    Example:
    ╭ intro.lua ────────────────────────────────────────────────────────────╮
>
      globalHighlights = {
        "highlight_one" = { bg = "#1e1e2e", fg = "#BAC2DE" },
        "highlight_two" = { bg = "#BAC2DE", fg = "#1e1e2e" },
      }
<
    ╰───────────────────────────────────────────────────────────────────────╯


    {animations} `table | nil`
    This property has all the animations defined inside it. It has the 
    following properties,
      {highlighBased} `table | nil`
      This takes various highlight group names and the values to animate
      through. The structure of this table is as follows,
    
      ╭ intro.lua ──────────────────────────────────────────────────────────╮
>
        {
  	  "highlight_one" = {
	    { fg = "#9399B2" }, { fg = "#A6ADC8" }, { fg = "#BAC2DE" }
	  }
        }
<
      ╰─────────────────────────────────────────────────────────────────────╯

      Note: Animations can sometimes cause `Neovim` to become slow.

      {textBased} `table | nil`
      Text based animation table. `Work in progress`
      The configuration table should look like this,

      ╭ intro.lua ──────────────────────────────────────────────────────────╮
>
        {
	  {
	    mode = "line",

	    line = 1,
	    values, {
	      "A", "A ", "A t", "A te", "A tex", 
	      "A text",
	      "A tex", "A te", "A t", "A ", "A"
	    }
	  },
	  {
	    mode = "virt_text"

	    x = 0, y = 0,
	    values, {
	      "A", "A ", "A t", "A te", "A tex", 
	      "A text",
	      "A tex", "A te", "A t", "A ", "A"
	    }
	  },
        }
<
      ╰─────────────────────────────────────────────────────────────────────╯

      {delay} `integer | nil`
      Amount of `miliseconds` to wait before running the animation loop
      
      Example:
      ╭ intro.lua ──────────────────────────────────────────────────────────╮
>
        { animations = { ddlay = 100 } }
<
      ╰─────────────────────────────────────────────────────────────────────╯
    
      {updateDelay} `integer | nil`
      Time gap between each frame being rendered(in `ms`).
      
      Example:
      ╭ intro.lua ──────────────────────────────────────────────────────────╮
>
        { animations = { updateDelay = 100 } }
<
      ╰─────────────────────────────────────────────────────────────────────╯


Presets                                                   *intro.nvim-presets*
------------------------------------------------------------------------------
`intto.nvim` provides various presets to use. Currently available presets,
  1. nvim_color               
  2. nvim_color_animated                                      ／l、 
                                                            （ﾟ､ ｡ ７   
  3. cat                                                      l  ~ヽ  
  4. cat_green                                                じしf_,)ノ
  5. cat_blue

Components                                             *intro.nvim-components*
------------------------------------------------------------------------------
`intro.nvim` provides components so that users can apply styles to text
Easily. Currently we have the following components,
  1. Banner
  2. Recents
  3. Time

Defining a component ~
  {type} `string | nil`
  Type defines what component a perticular table is. For example if you have
  something like this,
  
  ╭ Component ───────────────────────────────────────────────────────────────╮
>
    {
      lines = {
	"A line",
	"Another line"
      },

      width = 0.8,
      useIcons = false,
      length = 5,

      theme = "Normal"
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯

  The plugin wouldn't know wether this is a `banner` component or a `recents`
  component or if it's a `time` component.

  By using `type = "banner"` you can tell the plugin to ignore everything 
  other then `lines`.

  The default value for this is `banner`.


Banner ~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                              `type = "banner"`
Banner is used to define a group of line that have a specific style to them.
So, you don't have to write the color names, alignments etc. for every line.

It's structure looks something like This

━━ Banner ───────────────────────────────────────────────────────────────────╮
>
  {
    type = "banner", -- default value

    lines = {
      "A single line",
      { "A ", "few ", "words" }
    },

    align = {
      "center",
      "left"
    }

    colors = {
      "highlight_group",
      { "gradient_1", "gradient_2", "gradient_3" }
    },
    secondayColors = {
      nil,
      { nil, "Special", nil }
    }
  }
<
─────────────────────────────────────────────────────────────────────────────╯

Properties ~
  {lines} `table`
  This is a table containing all the lines you want to add to this component.

  Lines can be defined in 2 ways.
    1. Strings
    ╭ Lines ─────────────────────────────────────────────────────────────────╮
>
      {
	"A line can be a string"
      }
<
    ╰────────────────────────────────────────────────────────────────────────╯

    2. Table
    ╭ Lines ─────────────────────────────────────────────────────────────────╮
>
      {
	{ "A ", "line ", "can ", "also", "be ", "a table" }
      }
<
    ╰────────────────────────────────────────────────────────────────────────╯

  If you want to apply a solid or a gradient fill(color) to the entire line
  then you can just use a string. 

  But let's say that `A line` is in red, `can also be ` is in white and 
  `a table` is a gradient. In this case it would be much easier to define
  the colors if the line was a table.

  NOTE You can also use a string instead of a table in the 2nd case if you
       prefer.


  {align} `table | string | nil`
  A list or a string defining the alignment of text. Supported values
    • left
    • center(default)
    • right

    Example
    ╭ Lines ─────────────────────────────────────────────────────────────────╮
>
      {
	lines = {
	  "line 1",
	  "line 2",
	  "line 3"
	},

	align = {
	  "left",
	  "right",
	  "center"
	}
      }
<
    ╰────────────────────────────────────────────────────────────────────────╯

  NOTE If a line has no align value then the last one in the table is used.


  {width} `table | integer | float | nil`
  If you have characters that are bigger than normal characters which causes
  texts to be incorrectly aligned or if you want padding around the text then
  you can use this.

  Example
  ╭ Lines ───────────────────────────────────────────────────────────────────╮
>
    lines = {
      "line 1",
    },

    width = 0.9
<
  ╰──────────────────────────────────────────────────────────────────────────╯

  If the value is less than 1 then it is the percentage of the window width.
  If it is "auto" or nil it has no effect.

  When it is a table if width of a line is nil then the last width in the 
  table is used.


  {colors} `table | string | nil`
  This can be a table or a string or nil depending on what you want. It is
  the name of the `highlight group` to use as the color. More information
  about coloring is available in the *intro.nvim-colors* section.

  This property defines the coloring of the lines. The coloring can be done
  in many ways such as
    1. String
       When the value is a string it will use this highlight group for all 
       the lines.

    2. List(a lua table with highlight group names)
       When the value is a list the component will will apply the color
       based off of the index of the line.

       Example
       ╭ Lines ──────────────────────────────────────────────────────────────╮
>
        {
	  lines = {
	    "A line",
	    { "Another", "line" },
	    "Another one"
	  },

	  colors = {
	    "grouo_1",
	    "Special"
	  }
        }
<
       ╰─────────────────────────────────────────────────────────────────────╯

       In this case the first line will use `group_1` for highligjts,
       the second line will use `Special`.

       However, there is no highlight group for the last line. In this case,
       it will use the last highlight group for it's color.

       NOTE If you want to bypass this behavior just leave an empty string

    3. List within a list
       When the value is a list within a list then the line will have a
       gradient applied to it.

       Example
       ╭ Gradients ──────────────────────────────────────────────────────────╮
>
         {
	   { "group_1", "group_2", "group_3" }
	 }
<
       ╰─────────────────────────────────────────────────────────────────────╯

       NOTE More information about gradients are in *intro.nvim-colors* section

  You can also use all 3 of them together if you want.


  {secondaryColors} `table | nil`                              `list inside list`
  This is a table containing various highlight groups that will be applied
  to a line after the main color(ddfined in {colors}) is applied.
  
  This is useful when you have different colors in the same line.

  {secondaryColors} are `line index` based so if you want to skip a line just
  set it to `nil`.

  You can currently define `secondaryColors` in 2 ways.
  1. Set position
     In this case you specify a `from` and a `to` value and a `highlight`
     which can be a string or a table.

     Example
     ╭ SecondaryColors ──────────────────────────────────────────────────────╮
>
       secondaryColors = {
	 {
	   {
	     from = 0, to = 5, highlight = "second_1"
	   },
	   {
	     from = 6, to = 9, highlight = "second_2"
	   },
	 }
       }
<
     ╰───────────────────────────────────────────────────────────────────────╯
  2. Without a set position
     If you use a `table` in `lines` you can use this method which is much
     simpler

     Example
     ╭ SecondaryColors ──────────────────────────────────────────────────────╮
>
       lines = {
	 { "A", "Few", "Lines" }
       },
       secondaryColors = {
	 {
	   "grouo_1", "group_2", "group_3"
	 }
       }
<
     ╰───────────────────────────────────────────────────────────────────────╯

  You can combine them too if you want.


  {gradientRepeat} `boolean | table | nil`
  Determines wether gradients should repeat or not.

  When the value is a boolean it will apply to both `colors` and 
  `secondaryColors`.
  When the value is a table it will use the lines index and fallback to the
  last entry in the table if the value is `bil`.

  Example
  ╭ gradientRepeat ──────────────────────────────────────────────────────────╮
>
    -- It can be a boolean
    gradientRepeat = true,

    -- It can be a list of boolean
    gradientRepeat = { true, false, true },

    -- It can also be a single table
    gradientRepeat = {
      colors = true,
      secondaryColors = false
    },

    -- It can also be a list of tables too
    gradientRepeat = {
      {
	colors = false,
      },
      {
	secondaryColors = true
      }
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯

Recents ~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                             `type = "recents"`

Recents is a component that shows the recently accessed files from `oldfiles`.
It also sets up a keymap to easily open them.

Properties ~
  {style} `string | nil`
  Changes the style of the list. Can either be `list` or `centered`.

  Example
  ╭ Recents ─────────────────────────────────────────────────────────────────╮
>
    {
      style = "list" -- or "centered"
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯


  {width} `integer | float | nil`
  Defines the width of the list. Has no effect if style is `centered`.

  The default width is `50%` of the window width.

  Example
  ╭ Recents ─────────────────────────────────────────────────────────────────╮
>
    {
      width = 0.5,
      
      -- Also supports integer values
      width = 39
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯


  {useIcons} `boolean | nil`
  When `true` File icons with color will be visible. 
  NOTE Requires `nvim-web-devicons`

  Default is `false`

  Usage

  For `lazy.nvim` add the following lines to the plugin configuration table.
  The process should be similar for the other plugin managers too.

  ╭ plugins.lua ─────────────────────────────────────────────────────────────╮
>
    dependencies = {
      "nvim-web-devicons"
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯
  
  In the component table you should set {useIcons} to `true`.

  ╭ Recents ─────────────────────────────────────────────────────────────────╮
>
    {
      useIcons = true
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯


  {entryCount} `integer | nil`
  Number of entries to show.

  If for some reason(e.g. fresh linux install) the number of entries in 
  `oldfiles` is less than this number you will see entries with `Empty` 
  as the file name.

  Default number of entries is 5.

  Usage
  ╭ Recents ─────────────────────────────────────────────────────────────────╮
>
    {
      entryCount = 5
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯


  {keymap} `string | nil`
  The key combination to use for opening the file.

  When the `Cursor` is placed on top of one of the entries if you use the key
  combination it would open the file and close `intro.nvim`.

  Default is `<leader><leader>`

  Usage
  ╭ Recents ─────────────────────────────────────────────────────────────────╮
>
    {
      keymap = "<Space><Space>"
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯

  Check the keycodes with `:h keycodes` for the full list of available keys.


  {useAnchors} `boolean | nil`
  Wether to show the anchor popup on hover. Default is `true`.

  NOTE This is component specific. So, if you use this component multiple
       time you can choose which one of them will show the popup.
  
  Usage
  ╭ Recents ─────────────────────────────────────────────────────────────────╮
>
    {
      useAnchors = false
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯

  {dir} `string | boolean | nil`
  Use this to only show the recents files of a specific directory.

  When set to `false` loads `oldfiles`(`default` behavior).
  When set to `true` loads files of the current directory.
  When set to a `string` only shows entries that have that path.
  
  NOTE It currently doesn't support `relative` paths. So, you will need to use
       the `absolute` path.
  
  Usage
  ╭ Recents ─────────────────────────────────────────────────────────────────╮
>
    {
      -- Boolean value
      dir = false,

      -- String value
      dir = ".config/nvim/"
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯

  {colors} `table | nil`
    {name} `table | string | nil`
    Highlight group for the names.

    When set to a `string` it applies that `highlight group` to all the
    entries.

    When the value is a table it will use the index of the entry to set the
    `highlight group`, if a value is nil then the last entry in the table is
    used.

    NOTE To bypass this behavior set an entry to "".


    They also support gradients.

    Example usage of gradients
    ╭ Recents ───────────────────────────────────────────────────────────────╮
>
      colors = {
	name = {
	  { "grad_1", "grad_2", "grad_3" }
	}
      }
<
    ╰────────────────────────────────────────────────────────────────────────╯

    Gradients repeat behavior is determined by the `secondaryColors` of the
    `gradientRepeat` property.

    It will also work if you just set `gradientRepeat` to `true` or `false`.

    {number} `table | string | nil`
    Highlight group for the entry numbers.

    The behavior is the same as {name}.

    {whiteSpace} `table | string | nil`
    Highlight group for the spaces between the name and entry number.

    The behavior is the same as {name}.

  Usage
  ╭ Recents ─────────────────────────────────────────────────────────────────╮
>
    {
      colors = {
	name = {},
	number = {},

	whiteSpace = {}
      }
    }
<
  ╰──────────────────────────────────────────────────────────────────────────╯

Time ~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                                `type = "time"`

A simple clock.

Properties ~
  Currently has no properties.


Custom ~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                              `type = "custom"`
A planned component. I plan to allow users to define their own components
in their config.

Currently the planned structure is like this
━━ intro.lua ────────────────────────────────────────────────────────────────╮
>
  {
    type = "custom",
    callback = function ()
    end
  }
<
─────────────────────────────────────────────────────────────────────────────╯

It should return an output like this
━━ intro.lua ────────────────────────────────────────────────────────────────╮
>
  {
    {
      text = "A line",
      color = nil,
      secondaryColors = { "hl_2", "hl_3" }
    },
    {
      text = "Another line",
      color = n"hl_1",
      secondaryColors = { "hl_4", "hl_5" }
    }
  }
<
─────────────────────────────────────────────────────────────────────────────╯

Which can be directly rendered on the screen.

Colors                                                       *intro.nvim-colors*
------------------------------------------------------------------------------

                                    Setup
                                      ┃
                                      ┃
                                  Intro.nvim
                                      ┃
	     Default setup ━━━━┥Config Handler┝━━━━ Presets
                                      ┃
                                      ┃
                                      ┠─ Buffer Setup ┄┄┄┄┄┄┄┄┄┄ Data.lua
                                      ┃                            ┆
             Highlight Group applier ─╀─ Line renderer ┄┄┄┄┄┄┄┄┄┄┄┄┘



 vim:tw=77:ts=8:noet:ft=help:norl:
