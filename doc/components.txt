
`╭╌─────────────────────────────────────────────────────` *intro.nvim-components* `╌╮`
`│` 📦 Components                                `Building blocks for your :intro │`
`╰╌────────────────────────────────────────────────────────────────────────────╌╯`

Components are the bulding blocks of a start screen. They can do various
things such as align text, color them, list files, show the time etc.
                                                                                
                                                                                
                 `██╗███╗   ██╗████████╗██████╗  ██████╗      `                   
                 `██║████╗  ██║╚══██╔══╝██╔══██╗██╔═══██╗     `                   
                 `██║██╔██╗ ██║   ██║   ██████╔╝██║   ██║     `                   
                 `██║██║╚██╗██║   ██║   ██╔══██╗██║   ██║     `                   
                 `██║██║ ╚████║   ██║   ██║  ██║╚██████╔╝     `                   
                 `╚═╝╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝.nvim `                   
                                                                                
                                                                                
There are currently 4 types components. They are,
  - banner
  - recentFiles
  - keymaps
  - clock

────────────────────────────────────────────────────────────────────────────────

`╭─────────────────────────────────────────────────────────┨` 🧾 Table of contents
`│`
`├──` 🎴 Banner                                               |intro.nvim-cm-banner|
`├──` 📑 Recent Files                                    |intro.nvim-cm-recentFiles|
`├──` 🧰 Keymaps                                             |intro.nvim-cm-keymaps|
`╰──` ⏰ Clock                                                 |intro.nvim-cm-clock|

`╭───────────────────────────────────────────────────────` *intro.nvim-cm-banner* `─╮`
`│` 🎴 Banner                                                                    `│`
`╰──────────────────────────────────────────────────────────────────────────────╯`

Aligns & colors lines in bulk. Supports gradients.

This component provides the following options.

╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  {
    type = "banner",        -- Optional, determines the type of component a
					        -- table is
    width = "auto",         -- Optional, defines a custom width for the lines
    align = "center",       -- Optional, defines the alignment of lines

    lines = {},             -- The lines to add to the buffer
    functions = {},         -- Optional, functions whose values replaces the
                            -- function names in lines

    colors = {},            -- Optional, main color for the lines
    secondaryColors = {},   -- Optional, changed colors in specific parts of
                            -- the lines
    gradientRepeat = false  -- Optional, changes how gradients are applied
  }
<
╰──────────────────────────────────────────────────────────────────────────────╯

`┃ IMPORTANT`
`┃` Some of the options({colors}, {secondaryColors}, {gradientRepeat}, {align})
`┃` can also take `lists` as value. In which case, the line's index will be
`┃` used to assign it the value.
`┃` If a line's has `nil` as it's value the last `non-nil` value will be used.


- {type} `string or nil`

  Defines what component a table will be considered. Default is `banner`.

- {width} `number or string or nil`

  Allows the ability to add a cuatom width to the {lines}. Default value is
  "auto". It's value can either be a number or "auto".

  This should be used when you have characters that take up more space than
  normal characters(e.g. some arabic characters). However, you don't need to
  use it if you use `nerd font` characters as they DON'T take more space than
  a regular character.
  
`┃ NOTE`
`┃` When the value is less then 1, it will be used as a % value. So, for
`┃` example `width = 0.8` will be 80% of `window width`.
`┃` The width will also update on resizing the window.

╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
	components = {
	  {
		lines = { "Hello World" },
			  
		-- This will make the text behave like it has 20 characters
		width = 20
	  }
	}
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯

- {align} `string or nil`

  Changes the alignment of texts. Valid values are "left", "right" & "center".
  The default value is "center".

- {lines} `table`

  A table containing all the lines that will be added to the buffer. Lines can
  either be a `string` or a `table`.

`┃ NOTE`
`┃` Lines should be a `table` if you plan on coloring a part of the text
`┃` seperately. They should also be a `table` if you have parts of the text that
`┃` need to be dynamically generated.

- {functions} `table or nil`

  Function declarations. These funxtions replaces their names when used ib a
  line with a `table` value.

`┃` The main reasob for having this is to prevent ugly & unreadable setup
`┃` tables due to using functions in lines.

╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
	components = {
	  {
		lines = {
		  { "Version: ", "ver" }
		},

		functions = {
		  ver = function()
			return vim.version();
		  end
		}
	  }
	}
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯

- {colors} `string or table or nil`

  Color(s) for the lines. `Highlight group names` are used for coloring. When
  set to a `string` usws that color for all the lines.

╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
	components = {
	  {
	    lines = {
		  "A string",
		  { "A", " string", "as", " a ", "table" }
	    },

	    colors = "Comment"
	  }
	}
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯

`┃` This option also supports `gradients`. To use a horizontal gradient you can't
`┃` directly pass it as a list in {colors}.
`┃` Instead, you have to add the list as a value to thw {colors} table.

╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
	components = {
	  {
	    lines = {
		  "A string",
		  { "A", " string", "as", " a ", "table" }
	    },

	    -- This creates a vertical gradient
	    colors = { "Conditional", "Function", "Comment" },

	    -- This creates a horizontal gradient
	    colors = {
		  { "Conditional", "Function", "Comment" }
        },
	  }
	}
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯

- {secondaryColors} `table or nil`

  A `table` containing `tables` that assign different colors to different
  parts of the text. This only works when the line is a `table`.

╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
	components = {
	  {
	    lines = {
	  	  "Red | Blue",            -- will have no color
	  	  { "Red", " | ", "Blue" } -- will have color
	    },

	    secondaryColors = {
	  	  { "rd", nil, "bl" }
	    }
	  }
	},

	globalHighlights = {
      rd = { fg = "red" },
	  bl = { fg = "blue" }
	}
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯

`┃` You can also set a part's value to be `nil`. This will not change the
`┃` color of that part of the text.

╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
	components = {
	  {
	    lines = {
	  	  { "Main color", " | ", "Secondary Color" }
	    },

	    colors = "Comment",

	    secondaryColors = {
	  	  { nil, nil, "Special" }
	    }
	  }
	}
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯

You can also use `gradients` in it.

╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
	components = {
	  {
	    lines = {
	  	  { "Main Gradient ", "Secondary Gradient" }
	    },

	    -- main gradient
	    colors = {
	  	  { "main_1", "main_2", "main_3", "main_4", "main_5" }
	    },

	    -- secondary gradient
	    secondaryColors = {
	  	  { nil, {  "sec_1", "sec_2", "sec_3", "sec_4", "sec_5" } }
	    },

	    -- Optional, set it to see the gradients better
	    gradientRepeat = true
	  }
	},

	globalHighlights = {
      main_1 = { fg = "#89b4fa" },
      main_2 = { fg = "#90bfe3" },
      main_3 = { fg = "#97cbcd" },
      main_4 = { fg = "#9ed7b7" },
      main_5 = { fg = "#a6e3a1" },

	  sec_1 = { fg = "#fab387" },
	  sec_2 = { fg = "#f9be91" },
	  sec_3 = { fg = "#f9ca9b" },
	  sec_4 = { fg = "#f9d6a5" },
	  sec_5 = { fg = "#f9e2af" }
	}
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯

`┃ NOTE`
`┃` If you run `:Inspect` on the "Secondary Gradient" you may notice that
`┃` there are 2 highlight group(s) on all of it's letters.
`┃` This is not a bug, but is intended.

`┃ INFORMATION`
`┃` There is a bug in `nvim_buf_add_highlight()` which causes the order of
`┃` highlight groups in a specific position not to change. This can lead to
`┃` colors not showing when a solid color is used as {secondaryColors} and a
`┃` gradient is used as the {colors}.
`┃`
`┃` I am still trying to fix it. So, you should only use {secondaryColors} for
`┃` the entire text if there are solid colors & gradients present in the same
`┃` line.

- {gradientRepeat} `boolean or nil`

  Turns normal gradients into `repeating gradients`. Available values are
  `true` & `false`. The default is `false`.

`┃` By default, if the length of the gradient is less than the length of the
`┃` line the characters will use the last value in the gradient as color
`┃` after all the other values in the gradient have been used.
`┃`
`┃` By setting this option to `true`, you can make the gradient behave like
`┃` it's a repeating gradient.

Example usage.
╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
	components = {
	  {
	    lines = {
	  	  "A gradient colored text"
	    },

	    -- main gradient
	    colors = {
	      { "main_1", "main_2", "main_3", "main_4", "main_5" }
	    },

	    -- Change this ans see how the gradients get colored
	    gradientRepeat = true
	  }
	},

	globalHighlights = {
	  main_1 = { fg = "#89b4fa" },
      main_2 = { fg = "#90bfe3" },
      main_3 = { fg = "#97cbcd" },
      main_4 = { fg = "#9ed7b7" },
      main_5 = { fg = "#a6e3a1" }
	}
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯

`╭──────────────────────────────────────────────────` *intro.nvim-cm-recentFiles* `─╮`
`│` 📑 Recent Files                                                              `│`
`╰──────────────────────────────────────────────────────────────────────────────╯`

A fancy way to show all your recently opened files, with style.

This component provides the following options.
╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  {
    type = "recentFiles",       -- Determines the components type
    style = "list",             -- Optional, changes how the items are shown

    entryCount = 5,             -- Optional, number of items to show
    width = 0.8,                -- Optional, width of the items

    useIcons = false,           -- Optional, enables/disables file icons
    useAnchors = true,          -- Optional, enables/disables file path
	                            -- preview
    dir = false,                -- Optional, directory whose files are shown

    gap = " ",                  -- Optional, the character used as spaces

    colors = {
      name = {},                -- Optional, color for file names
      path = {},                -- Optional, color for file paths(without the
	  	                        -- filename)
                               
      number = {},              -- Optional, color for the item number
                               
      spaces = {}               -- Optional, color for the spaces
    },                         
                               
    anchorStyle = {            
      corner = nil,             -- Optional, character to use as the anchor's
	                            -- corner
                               
      textStyle = nil,          -- Optional, highlight group for the anchor
	                           -- text
      cornerStyle = nil         -- Optional, highlight group for the corner
    },

    keymapPrefix = "<leader>"   -- Optional, the prefix key for opening files
	                            -- on the list
  }
<
╰──────────────────────────────────────────────────────────────────────────────╯

`┃ IMPORTANT`
`┃` Some of the options({gap}, {gradientRepeat}, everything inside {colors})
`┃` can also take `lists` as value. In which case, the line's index will be
`┃` used to assign it the value.
`┃` If a line's has `nil` as it's value the last `non-nil` value will be used.


- {type} `string or nil`

  Defines what component a table will be considered. Default is `banner`.

- {style} `string or nil`

  Changes the styling of the component. Possible values are `list`, `list_path`.
  The default is `list`.

Example usage.
╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
	components = {
	  {
	    type = "recentFiles",
	    -- change it to "list_path" to see the diffeeence
	    style = "list"
	  }
	}
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯

- {entryCount} `number or nil`

  The number of entries to include. Default is 5.

Example usage.
╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
	components = {
	  {
	    type = "recentFiles",
	    entryCount = 10
	  }
	}
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯

- {width} `number or nil`

  Allows you to change how wide the list will be. If the value is less than 1
  then it will be considered a % value. So, for example, 0.5 will be 50% of
  window width.
  The default value is 0.8.

Example usage.
╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
	components = {
	  {
	    type = "recentFiles",
	    -- the list will be 60% of the window size
	    width = 0.6
	  }
	}
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯

- {useIcons} `boolean or nil`

  Used to show file icons in the list. Valid values are `true`, `false`.
  The default is `false`.

`┃` To use icons you need "nvim-web-devicons" & a `nerd font`.

- {useAnchors} `boolean or nil`

  Allows you to enable/disable the `file path preview`.

Example usage.
╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
	components = {
	  {
	    type = "recentFiles",
	    entryCount = 3
	    
	    useAnchors = true
	  }
	}
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯
`╭ Neovim ───────────────────────────────┯──────────────────────────────────────╮`
`│`                    useAnchors = false `│`                    useAnchors = true `│`
`│`                                       `│`                                      `│`
`│`    Test                          1    `│`    Test                          1   `│`
`│`    intro.txt                     2    `│`    intro.txt                     2   `│`
`│` █  DOC.md                        3    `│` ░  DOC.md                        3   `│`
`│`                                       `│`                                      `│`
`│`                                       `│` ~/.config/nvim/DOC.md                `│`
`╰───────────────────────────────────────┷──────────────────────────────────────╯`

- {dir} `boolean or string or nil`

  Used to either list files with a `specific pattern` or to only list filea in
  the current directory.
  When set to a `string` it is used to match file names. If set to `true`, it
  will only list files in the current working directory. You can list all the
  files by setting it to `false`.
  The default value is `false`.

`┃` This option uses `string.match()` so patterns can also be used as the value.


- {gap} `string or nil`

  The character(s) to use as spacing between the `file name` & the 
  `item number`.
  The default is " ".

`┃` This option uses `string.match()` so patterns can also be used as the value.

Example usage.
╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
	components = {
	  {
	    type = "recentFiles",
	    entryCount = 1
	    
	    gap = "•"
	  }
	}
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯
`╭ Neovim ──────────────────────────────────────────────────────────────────────╮`
`│`                                                                              `│`
`│`                                                                              `│`
`│`        test.lua•••••••••••••••••••••••••••••••••••••••••••••••••••••1        `│`
`│`                                                                              `│`
`│`                                                                              `│`
`╰──────────────────────────────────────────────────────────────────────────────╯`

`┃` The value of {gap} can also be multiple characters.

╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
	components = {
	  {
	    type = "recentFiles",
	    entryCount = 1
	    
	    gap = "• "
	  }
	}
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯
`╭ Neovim ──────────────────────────────────────────────────────────────────────╮`
`│`                                                                              `│`
`│`                                                                              `│`
`│`        test.lua• • • • • • • • • • • • • • • • • • • • • • • • • • •1        `│`
`│`                                                                              `│`
`│`                                                                              `│`
`╰──────────────────────────────────────────────────────────────────────────────╯`

- {colors} `table or nil`

  Used for setting colors for various parts of the lists. It has the following
  options.
   - {path} `string or table or nil`
   - {name} `string or table or nil`
   - {space} `string or table or nil`
   - {number} `string or table or nil`

   {path} is used for coloring the file paths(only available in "list_path").
   {name} is used for the file name. {space} is used between {name} & {number}.
   {number} is used for the item number.

`┃ TIPS`
`┃` All the options support horizontal & vertical gradients. So you can create
`┃` shades in the list items

╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
	components = {
	  {
	    type = "recentFiles",
	    entryCount = 3,

	    colors = {
	      name = { "l1", "l2", "l3" }
	    }
	  }
	},

	globalHighlights = {
	  l1 = { fg = "#cdd6f4" },
	  l2 = { fg = "#9298b2" },
	  l3 = { fg = "#585b70" }
	}
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯

- {anchorStyle} `table or nil`

  Allows the customisation of the `file path preview` of a component. It has
  the following options.
    - {corner} `string or nil`
	- {textGroup} `string or nil`
	- {cornerGroup} `string or nil`

  Thw {corner} option allows you to change the character(s) used as the corner
  of the preview. On the other hand, {textGroup} & {cornerGroup} allows you to
  change the style of the file path & the corner respectively.

Example usage.
╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
	components = {
	  {
	    type = "recentFiles",
	    entryCount = 1,

		anchorStyle = {
	      corner = "█▓▒",

		  textStyle = "Normal",
		  cornerStyle = "Normal"
	    }
	  }
	}
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯
`╭ Neovim ──────────────────────────────────────────────────────────────────────╮`
`│`                                                                              `│`
`│`                                                                              `│`
`│` █      test.lua                                                     1        `│`
`│`                                                                              `│`
`│` ~/.config/nvim/lua/test.lua█▓▒                                               `│`
`╰──────────────────────────────────────────────────────────────────────────────╯`

- {keymapPrefix} `string or nil`

  Prefix of the keymap to quickly open a file in the list. You can use it by
  adding the `number` after the prefix.
  The default is "<leader>".

`┃` To open the first file in a list you use the keymap "<leader>1". This
`┃` allows quickly opening files from multiple `recentFiles` components by
`┃` setting a different prefix for them.

`╭──────────────────────────────────────────────────────` *intro.nvim-cm-keymaps* `─╮`
`│` 🧰 Keymaps                                                                   `│`
`╰──────────────────────────────────────────────────────────────────────────────╯`

Sets some keymaps for the `Intro` buffer.

This component has the following options.
╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  {
	type = "keymaps",       -- Optional, determines the type of component a
					        -- table is
    style = "list",         -- Optional, changes how keymaps are shown

    columnSeparator = " ",  -- Optional, characters added between columns
    separatorHl = "",       -- Optional, color for the characters between
	                        -- columns
    maxcolumns = 4,         -- Optional, max number of columns per line

    lineGaps = 0            -- Optional, number of gaps between each items
  }
<
╰──────────────────────────────────────────────────────────────────────────────╯

- {type} `string or nil`

  Defines what component a table will be considered. Default is `banner`.

- {style} `string or nil`

  Changes the styling of the component. Possible values are `silent`, `list` &
  `columns`.
  The default is `list`.

Example usage.
╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
    components = {
      {
        type = "keymaps",

        style = "columns",

        -- Optional
        columnSeparator = " ║ ",
        separatorHl = "Comment",

        keymaps = {
          {
            text = { "  ", "M", "inimap" },
            colors = { "sky", "sky_1", "sky" },

            keyCombination = "M",
            keyAction = ":lua require('mini.map').toggle()<CR>",
          },
          {
            text = { "  ", "T", "elescope" },
            colors = { "comp", "comp_1", "comp" },

            keyCombination = "T",
            keyAction = ":Telescope<CR>",
          }
        }
      }
    },

    globalHighlights = {
      sky = { fg = "#89B4FA" },
      sky_1 = { fg = "#89B4FA", underline = true },
      comp = { fg = "#F9E2AF" },
      comp_1 = { fg = "#F9E2AF", underline = true }
    }
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯

- {columnSeparator} `string or nil`

  The character(s) to add between the `columns` in the `columns` style. The
  default value is " ".

Example usage.
╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
    components = {
      {
        type = "keymaps",
        style = "columns",

		-- change this to something else & see the diffeeence
        columnSeparator = " ║ ",
        separatorHl = "Comment",

        keymaps = {
          {
            text = "  Minimap",

            keyCombination = "M",
            keyAction = ":lua require('mini.map').toggle()<CR>",
          },
          {
            text = "  Telescope",

            keyCombination = "T",
            keyAction = ":Telescope<CR>",
          }
        }
      }
    }
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯
`╭ Neovim ──────────────────────────────────────────────────────────────────────╮`
`│`                                                                              `│`
`│`                                                                              `│`
`│`                            MiniMap ║   Telescope                           `│`
`│`                                                                              `│`
`│`                                                                              `│`
`╰──────────────────────────────────────────────────────────────────────────────╯`

- {separatorHl} `string or table or nil`

  Chnages the coloring of the {gap}. Also supports `horizontal` gradients.

Example usage.
╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
    components = {
      {
        type = "keymaps",
        style = "columns",

		-- change this to something else & see the diffeeence
        columnSeparator = " ║ ",
        separatorHl = { "Comment", "Function", "Conditional" },

        keymaps = {
          {
            text = "  Minimap",

            keyCombination = "M",
            keyAction = ":lua require('mini.map').toggle()<CR>",
          },
          {
            text = "  Telescope",

            keyCombination = "T",
            keyAction = ":Telescope<CR>",
          }
        }
      }
    }
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯

- {maxColumns} `number or nil`

  Maximum number of columns in a line for the `columns` style. Default value
  is 4.

- {lineGaps} `number or nil`

  Number of lines between each keymaps in the `list` style. Default value is 0.

`╭────────────────────────────────────────────────────────` *intro.nvim-cm-clock* `─╮`
`│` ⏰ Clock                                                                     `│`
`╰──────────────────────────────────────────────────────────────────────────────╯`

A fancy way to show the time. Doesn't update in realtime(but can be made to	
update in realtime).

This component has the following options.
╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  {
	type = "clock",           -- Optional, determines the type of component a
					          -- table is
    style = {
      clockStyle = "basic",   -- Optional, style for the component
      textStyle = "filled",   -- Optional, style for the texts in the component

      clockParts = {          -- Optional, parts for the borders
        "╭", "─", "╮",
        "│", " ", "│",
        "╰", "─", "╯"
      },
      colon = "•"             -- Optional, character used as : in the clock
    }

    colors = {
      spaces = "",            -- Optional, color for the empty spaces
      colon = "",             -- Optional, color for the colon
      border = "",            -- Optional, color for the borders
                              
      hour = "",              -- Optional, color for the hour part
      minute = "",            -- Optional, color for the minute part
      second = "",            -- Optional, color for the second part
      dayNight = "",          -- Optional, color for "am" or "pm" text
                              
      day = "",               -- Optional, color for the day of the week
      date = "",              -- Optional, color for the date
      month = "",             -- Optional, color for the month name
      year = ""               -- Optional, color for the year
    }
  }
<
╰──────────────────────────────────────────────────────────────────────────────╯

- {type} `string or nil`

  Defines what component a table will be considered. Default is `banner`.

- {style} `table or nil`

  Changes the styling of the component. It has these options.
    - {clockStyle} `string or nil`
	- {textStyle} `string or nil`
	- {clockParts} `table or nil`
	- {colon} `string or nil`

  {clockStyle} will change how the clock itself looks. On the other hand,
  {textStyle} will chnage how the Numbers are shown.

  The {clockParts} have various parts that will create the clock. It has
  the following format,
  
    "border-topLeft",    "border-top",    "border-topRight",
	"border-left",       "whitespace",    "border-right",
	"border-bottomLeft", "border-bottom", "border-bottomRight"

  And lastly, {colon} will be used between the `hour`, `minute` & `second` in
  the `basic` {clockStyle}.

  The available values for {clockStyle} are `basic`(default) & `compact`.
  The available values for {textStyle} are `rounded`, `blocky`, `dotted` &
  `filled`(default).

╭ `Lua` ─────────────────────────────────────────────────────────────────────────╮
>lua
  require("intro").setup({
    components = {
      {
        type = "clock",

        style = {
		  clockStyle = "basic",
		  textStyle = "dotted"
        }
      }
    },
  });
<
╰──────────────────────────────────────────────────────────────────────────────╯
`╭ Neovim ──────────────────────────────────────────────────────────────────────╮`
`│`                                                                              `│`
`│`                                                                              `│`
`│`                                                                              `│`
`│`                                                                              `│`
`│`                  ╭───────────────────────────────────────────╮               `│`
`│`                  │                                           │               `│`
`│`                  │   ⣾⠛⣷ ⠛⠛⣷   ⣿ ⣿ ⠛⠛⣷   ⣾⠛⣷ ⣾⠛⠛   ⣾⠛⣷ ⣷⣀⣾   │               `│`
`│`                  │   ⣿ ⣿ ⠶⠶⣿ • ⠙⠛⣿ ⠶⠶⣿ • ⣿ ⣿ ⠙⠶⣄   ⣿⠶⠟ ⣿⠉⣿   │               `│`
`│`                  │   ⢿⣤⡿ ⣤⣤⡿     ⣿ ⣤⣤⡿   ⢿⣤⡿ ⣤⣤⡿   ⣿   ⣿ ⣿   │               `│`
`│`                  │                                           │               `│`
`│`                  ╰───────────────────────────────────────────╯               `│`
`│`                                                                              `│`
`│`                                                                              `│`
`│`                                                                              `│`
`│`                                                                              `│`
`╰──────────────────────────────────────────────────────────────────────────────╯`

- {colors} `table or nil`

  Coloring for various parts of the component. It has thw following options.
    - {spaces}
	- {border}
    - {hour}
	- {minute}
	- {dayNight}

	Only available in the `basic` {clockStyle}
	- {second}

	Only available in the `compact` {clockStyle}
	- {day}
	- {date}
	- {month}
	- {year}

`┃` {dayNight} is used to color the AM/PM part.

`┃ TIP`
`┃` If you want the clock to update automatically, you can set up a timer that
`┃` will run the `:Refresh` command on a specific delay.
`┃`
`┃` This feature may be added in the future.


`───────────────────────────────────────────────────────────────────────────────╮`
vim:tw=80:ts=4:noet:ft=help:norl:
