╭───────────────────────────────────────────────────── *intro.nvim-components* ╮
│ 🌃 Components                        `The building blocks of a start screen` │
╰────────────────────────────────────────────────────────────────────────────╯

               ██████▒▒░░      ⠛⣿⠛ ⣿⣄  ⣿ ⠛⠛⣿⠛⠛ ⣾⠛⠛⣷ ⣾⠛⠛⣷
               ██░░▒▒██▒▒░░     ⣿  ⣿ ⣿ ⣿   ⣿   ⣿⠶⠶⠟ ⣿  ⣿
               ██░░▒▒████▒▒░░   ⣿  ⣿ ⣿ ⣿   ⣿   ⣿⠷   ⣿  ⣿
               ██▒▒▒▒░░▒▒▒▒░░  ⣤⣿⣤ ⣿  ⠙⣿   ⣿   ⣿ ⢷  ⢿⣤⣤⡿.nvim
               ██████▒▒▒▒░░    
               ▒▒▒▒▒▒▒▒░░      `Yet another start screen plugin`

Comoonents help you create complex `start screen` without needing to worry
about things like `line spacing`, `alignments`, `coloring` etc.

`╭──────────────────────────────────────────────────────────┤` Table of contents
`│`
`├──` Component list                                   |intro.nvim-component-list|
`├──` Banner                                                 |intro.nvim-c-banner|
`├──` Recents                                               |intro.nvim-c-recents|
`╰──` Keymaps                                               |intro.nvim-c-keymaps|

`╭─────────────────────────────────────────────────` *intro.nvim-component-list* `╮`
`│` 🌄 Component list                                               `⬜⬛⬜⬛⬜ │`
`╰────────────────────────────────────────────────────────────────────────────╯`
Here is a list of all the available components and what they do,
     1. Banner           `Render line(s) with alignments & colors`
     2. Recents          `Show recently opened files`
     3. Keymaps          `Show some keympas`

`╭───────────────────────────────────────────────────────` *intro.nvim-c-banner* `╮`
`│` 🎴 Component: Banner                                                  `🧧🎴 │`
`╰────────────────────────────────────────────────────────────────────────────╯`
This Component was created for holding `text arts` like a banner. But you can
use it for other purposes too.

This components has the following `sub options`,
  {lines}               `List of lines to render`
	{functions}           `Text functions that can be used in a line`
  {colors}              `Color to use`
  {secondaryColors}     `Controlling the coloring of specific parts of a line`
  {gradientRepeat}      `Gradient repeat related options`
  {align}               `Alignment of the lines`
  {width}               `Custom width of the lines`

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
			  type = "banner",  -- Optional
				lines = {
					"Hello World"
				}
			}
    }
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `────────────────────────────────────────────────────────────────────╮`
`│                                                                            │`
`│                                                                            │`
`│`Hello World                                                                 `│`
`│                                                                            │`
`│                                                                            │`
`╰────────────────────────────────────────────────────────────────────────────╯`

Properties ~
`├────────────────────────────────────────────────────────────────────────────┐`
`│` {lines}                                                              table `│`
`├────────────────────────────────────────────────────────────────────────────┘`

A `list-like` table containing all the lines of a component. Lines can be either
strings or `list-like` tables themselves.

Usage	~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
				lines = {
					"Hello World",
					{ "Hi", "Mom" }
				}
			}
    }
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `────────────────────────────────────────────────────────────────────╮`
`│                                                                            │`
`│                                                                            │`
`│`                                Hello World                                 `│`
`│`                                   Hi Mom                                   `│`
`│                                                                            │`
`│                                                                            │`
`╰────────────────────────────────────────────────────────────────────────────╯`

When it comes to rendering the lines both `string` & `table` type lines will
be rendered the same way. Only the coloring method is different.

`╭` When to use each strings or tables `────────────────────────────────────────╮`
`│` If you are going to use a single color on the entire line then it is       `│` 
`│` better to use a `string`.                                                    `│`
`│`                                                                            `│`
`│` But if you want to color a part of the text  differently then a `table` is   `│`
`│` better since you don't have to deal with the knowing the postion of a      `│`
`│` specific character.                                                        `│`
`╰────────────────────────────────────────────────────────────────────────────╯`

Another reason for having `list-like` tables is that they can also be function
names. This makes it look much cleaner as all the functions themselves can be
in a different table.

Scenario ~
Let's say for example you have 2 letters and you want to add spaces between
them so that the total number of characters is equal to 80% of the total
window width.

You can manually do this. However, on window resize the number of spaces
aren't going to change. For this type of scenarios this feature exists.

Demonstration ~
`╭` Neovim `────────────┯────────────────────────────────────────┯──────────────╮`
`│`                    `│`                                        `│`              `│`
`│`                    `│`                                        `│`              `│`
`│`  1              2  `│`    1                              2    `│` 1          2 `│`
`│`                    `│`                                        `│`              `│`
`│`                    `│`                                        `│`              `│`
`╰────────────────────┷────────────────────────────────────────┷──────────────╯`

Code ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
				lines = {
					{ "1", "SP", "2" }
				},
				functions = {
					sp = function()
						local W = vim.api.nvim_win_get_width(0);

						-- Total characters = number of spaces + 2 characters
						return string.rep(" ", (W * 0.8) - 2);
					end
				}
			}
    }
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`

`├────────────────────────────────────────────────────────────────────────────┐`
`│` {functions}                                                   table or nil `│`
`├────────────────────────────────────────────────────────────────────────────┘`

A list-like table containing functions that can be used in any of the lines.
They are `component-specific` so you can only use them in the component they
are defined in.

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
				lines = {
					"fn",                -- Lines can't be a function name
					{ "Hello ", "fn" }
				},
				functions = {
				  fn = function()
						return "User";
					end
				}
			},
			{
				lines = {
					{ "fn" }             -- Can't be used in a different component
				}
			}
    }
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `────────────────────────────────────────────────────────────────────╮`
`│                                                                            │`
`│                                                                            │`
`│`                                     fn                                     `│`
`│`                                 Hello User                                 `│`
`│`                                     fn                                     `│`
`│                                                                            │`
`│                                                                            │`
`╰────────────────────────────────────────────────────────────────────────────╯`

Functions `must` return a string or else the plugin won't render anything and
throw an error message.

`├────────────────────────────────────────────────────────────────────────────┐`
`│` {colors}                                            string or table or nil `│`
`├────────────────────────────────────────────────────────────────────────────┘`

List or string containing `highlight group` names to add to the text. Uighlight
groups are added to the text themselves and not to the spaces around the
text.

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
				lines = {
					"line 1",
					{ "line ", "2" }
				},
				colors = "FILL"
			},
			{
				lines = {
					"line 3",
					"line 4"
				},

				colors = {
					"FILL",
					"Comment"
				}
			}
    },

		globalHighlights = {
			FILL = { bg = "#FFFFFF", fg = "#FFFFFF" },
		}
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `────────────────────────────────────────────────────────────────────╮`
`│                                                                            │`
`│                                                                            │`
`│`                                  ██████                                    `│`
`│`                                  ██████                                    `│`
`│`                                  ██████                                    `│`
`│                                  line 4                                    │`
`│                                                                            │`
`│                                                                            │`
`╰────────────────────────────────────────────────────────────────────────────╯`

If a value is `nil` the last value in the `list` is going to be used. However,
if you would prefer to not color a specific line you can just use an empty
string instead.

Gradients ~
Colors can be a gradient too. To use a gradient a line must have a `list-like`
table as it's color value.

Example ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
		components = {
			{
				lines = { "A long text" },
				colors = { { "Normal", "FILL" } }
			}
		},

		globalHighlights = {
			FILL = { bg = "#FFFFFF", fg = "#FFFFFF" },
		}
	})
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `─────────────────────────────┯──────────────────────────────────────╮`
`│               gradientRepeat = true │               gradientRepeat = false │`
`│                                     │                                      │`
`│                                     │                                      │`
`│`            A█l█n█ █e█t              `│`             A██████████              `│`
`│                                     │                                      │`
`│                                     │                                      │`
`│                                     │                                      │`
`╰─────────────────────────────────────┷──────────────────────────────────────╯`


`├────────────────────────────────────────────────────────────────────────────┐`
`│` {secondaryColors}                                             table or nil `│`
`├────────────────────────────────────────────────────────────────────────────┘`

List containing `strings` or `tables` specifying where to change the highlight
group.

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
				lines = {
					{ "Solid", " Normal ", "Gradient" },
				},
				secondaryColors = {
					{ "FILL", "", { "Normal", "FILL" } }
				}
			},
    },

		globalHighlights = {
			FILL = { bg = "#FFFFFF", fg = "#FFFFFF" },
		}
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `─────────────────────────────┯──────────────────────────────────────╮`
`│               gradientRepeat = true │               gradientRepeat = false │`
`│                                     │                                      │`
`│                                     │                                      │`
`│`        █████ Normal G█a█i█n█        `│`         █████ Normal G███████        `│`
`│                                     │                                      │`
`│                                     │                                      │`
`│                                     │                                      │`
`╰─────────────────────────────────────┷──────────────────────────────────────╯`

The value of {secondaryColors} can be of 2 types,
		1. Position specific.
		2. Part specific.

Position specific ~
Use {from} and {to} define a range of characters to apply a color. Character
range is 0-based so the first character's position is 0. Useful when the line
can't be turned into a list or when a line is provided by some other plugin.

Gradients are also supported.

`╭` NOTE `──────────────────────────────────────────────────────────────────────╮`
`│` This method is a bit `bugged` so I suggest you don't use it unless you       `│`
`│` absolutely need it.                                                        `│`
`╰────────────────────────────────────────────────────────────────────────────╯`

How positions work ~
Under the hood, the plugin uses `nvim_buf_add_highlight()` to color text.
However, this function uses `byte` as index and NOT `letters`.

This is a simplified explanation of how it's done.

Terminals use something called `ANSI escape codes` to color text among various
other things.

`╭` Terminal `──────────────────────────────────────────────────────────────────╮`
`│` `╭╴` ~/.config/nvim/lua                                        at 8:16:16 PM `│`
`│` `╰╴` echo "\x1b[38;2;255,255,255m\x1b[48;2;255;255;255mHello"                `│`
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Terminal `──────────────────────────────────────────────────────────────────╮`
`│` `╭╴` ~/.config/nvim/lua                                        at 8:16:16 PM `│`
`│` `╰╴` echo "\x1b[38;2;255,255,255m\x1b[48;2;255;255;255mHello\n"              `│`
`│` █████                                                                      `│`
`│`                                                                            `│`
`│` `╭╴` ~/.config/nvim/lua                                        at 8:17:19 PM `│`
`│` `╰╴`                                                                         `│`
`╰────────────────────────────────────────────────────────────────────────────╯`

These codes are applied `before` some text to color them. TUI apps such as
`Neovim` uses some type of library to handle this.

The problem is that `Lua` doesn't understand what a character is. If you try
to find a length of a string that have special characters in it you will see
that the length and thw number of characters are different.

So, `nvim_buf_add_highlight()` also uses byte index. So, to color a character
the plugin needs to find it's starting `coordinates` and ending `coordinates`.

To solve the problem of needing to remember the `byte index` of a character the
plugin allows users to only add the starting `characters index` and the ending
`characters index.`

This solves the big issue but also introduces a new issue. What happens when
a character has multiple {secondaryColors} applied to it? This is what causes
the highlight groups to sometimes be `incorrectly` applied.

Enough technical details. Let's just give you an example usage.

`╭` Scratch `───────────────────────────────────────────────────────────────────╮`
`│`  Word ─────→  W o r d ╌╌╌╌╌╌╌╌╌╌ How we see text                           `│`
`│`              0 1 2 3 4 ╌╌╌╌╌╌╌╌╌ How `Neovim` sees the text                  `│`
`│`						  0 1 2 3 ╌╌╌╌╌╌╌╌╌╌ How the plugin sees the text              `│`
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
				lines = {
					"Some text"
				},
				secondaryColors = {
					{ -- Everything in this list is applied to the 1st line
						{
							from = 0, to = 5,
							groupName = "FILL"
						}
					}
				}
			},
    },

		globalHighlights = {
			FILL = { bg = "#FFFFFF", fg = "#FFFFFF" },
		}
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `────────────────────────────────────────────────────────────────────╮`
`│`                                                                            `│`
`│`                                                                            `│`
`│`                                  █████text                                 `│`
`│`                                                                            `│`
`│`                                                                            `│`
`╰────────────────────────────────────────────────────────────────────────────╯`

The {groupName} can also be a `list`. In this case it will be considered a
gradient.

`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
				lines = {
					"Some text"
				},
				secondaryColors = {
					{ -- Everything in this list is applied to the 1st line
						{
							from = 0, to = 4,
							groupName = { "Normal", "FILL" }
						}
					}
				}
			},
    },

		globalHighlights = {
			FILL = { bg = "#FFFFFF", fg = "#FFFFFF" },
		}
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `─────────────────────────────┯──────────────────────────────────────╮`
`│               gradientRepeat = true │               gradientRepeat = false │`
`│                                     │                                      │`
`│                                     │                                      │`
`│`              S█m█ text              `│`               S████text              `│`
`│                                     │                                      │`
`│                                     │                                      │`
`│                                     │                                      │`
`╰─────────────────────────────────────┷──────────────────────────────────────╯`

Part specific ~
Separate a line into smaller `pieces` and color them `individually`. You don't
need to worry about any position and easily color parts of text.

Gradients are supported.

`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
				lines = {
					{ "Solid", " Normal ", "Gradient" },
				},
				secondaryColors = {
					{ "FILL", "", { "Normal", "FILL" } }
				}
			},
    },

		globalHighlights = {
			FILL = { bg = "#FFFFFF", fg = "#FFFFFF" },
		}
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `─────────────────────────────┯──────────────────────────────────────╮`
`│               gradientRepeat = true │               gradientRepeat = false │`
`│                                     │                                      │`
`│                                     │                                      │`
`│`        █████ Normal G█a█i█n█        `│`         █████ Normal G███████        `│`
`│                                     │                                      │`
`│                                     │                                      │`
`│                                     │                                      │`
`╰─────────────────────────────────────┷──────────────────────────────────────╯`

`├────────────────────────────────────────────────────────────────────────────┐`
`│` {gradientRepeat}                                   boolean or table or nil `│`
`├────────────────────────────────────────────────────────────────────────────┘`

Controls whether `gradients` are repeated or not. You can also set the
behaviour for {colors} & {secondaryColors} individually.

You can set it in 3 ways,
		1. To all the lines in a `component`.
		2. To a specific line in a `component`.


Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
				lines = {
					"Placeholder text",
					"Placeholder text",
				},
				colors = {
					{ "FILL", "Normal" },
				},
				gradientRepeat = {
					true,
					{ colors = false }
				}
			},
    },

		globalHighlights = {
			FILL = { bg = "#FFFFFF", fg = "#FFFFFF" },
		}
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `────────────────────────────────────────────────────────────────────╮`
`│`                                                                            `│`
`│`                                                                            `│`
`│`                              █l█c█h█l█e█ █e█t                              `│`
`│`                              █laceholder text                              `│`
`│`                                                                            `│`
`│`                                                                            `│`
`╰────────────────────────────────────────────────────────────────────────────╯`

`├────────────────────────────────────────────────────────────────────────────┐`
`│` {align}                                             string or table or nil `│`
`├────────────────────────────────────────────────────────────────────────────┘`

Control the alignment of texts.

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
		components = {
			{
				lines = {
					"A line"
				},
				align = "left" -- or "right" or "center"
			}
		}
	})
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `──────────────┯──────────────────────────┯──────────────────────────╮`
`│`         `align = left │`           `align = center │`            `align = right │`
`│`                      `│`                          `│`                          `│`
`│`A line                `│`         A line           `│`                    A line`│`
`│`                      `│`                          `│`                          `│`
`│`                      `│`                          `│`                          `│`
`╰──────────────────────┷──────────────────────────┷──────────────────────────╯`

It can also be a `list-like` table to specify the alignment of each line. If
a line has no {align} value the last item in the list is used.

By default, all the lines are "centered".

`├────────────────────────────────────────────────────────────────────────────┐`
`│` {width}                                            integer or float or nil `│`
`├────────────────────────────────────────────────────────────────────────────┘`

Specify a custom width for the texts in a line.

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
		components = {
			{
				lines = {
					"A line"
				},
				width = 0.8
			}
		}
	})
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `────────────────────────────────────────────────────────────────────╮`
`│`                                                                            `│`
`│`                                                                            `│`
`│`        A line                                                              `│`
`│`                                                                            `│`
`│`                                                                            `│`
`╰────────────────────────────────────────────────────────────────────────────╯`

It can also be a `list-like` table for setting a width for a specific line.
If a line has no {width} value the last item in the list is used.

When the value is larger than 1 it is directly used as the width. However, if
the value is smaller than 1 then it is used as % value. So, 0.8 means the
width will be 80% of the window width.


`╭──────────────────────────────────────────────────────` *intro.nvim-c-recents* `╮`
`│` 🎴 Component: Recents                                                 `📃⏳ │`
`╰────────────────────────────────────────────────────────────────────────────╯`
This component shows the most recently opened files in `Neovim`.

This components has the following `sub options`,
	{style}                `Changes the look of the component`
	{width}                `Width of the list`
	{useIcons}             `Controls the usage of file icons`
	{useAnchors}           `Controls the usage of file path preview`
	{colors}               `Coloring of various parts of the text`
	{gradientRepeat}       `Gradient repeat related options`

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
			  type = "recents",
				useIcons = false,
				useAnchors = true,
				entryCount = 5,
				width = 0.8
			}
    }
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `────────────────────────────────────────────────────────────────────╮`
`│                                                                            │`
`│                                                                            │`
`│`        intro.lua                                                   1       `│`
`│`        test.txt                                                    2       `│`
`│`        .zshrc                                                      3       `│`
`│`        init.lua                                                    4       `│`
`│`        plugins.lua                                                 5       `│`
`│                                                                            │`
`│                                                                            │`
`╰────────────────────────────────────────────────────────────────────────────╯`

Properties ~
`├────────────────────────────────────────────────────────────────────────────┐`
`│` {style}                                                      string or nil `│`
`├────────────────────────────────────────────────────────────────────────────┘`

Changes the style of how the items are shown. You can either have a fixed
width list or a centered list.

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
			  type = "recents",
				style = "list",
				useIcons = false,
				useAnchors = true,
				entryCount = 3,
				width = 0.8
			}
    }
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `─────────────────────────────┯──────────────────────────────────────╮`
`│                      style = "list" │                   style = "centered" │`
`│                                     │                                      │`
`│                                     │                                      │`
`│`    intro.lua                    1   `│`              intro.lua               `│`
`│`    test.txt                     2   `│`               test.txt               `│`
`│`    .zshrc                       3   `│`                .zshrc                `│`
`│                                     │                                      │`
`│                                     │                                      │`
`│                                     │                                      │`
`╰─────────────────────────────────────┷──────────────────────────────────────╯`

`├────────────────────────────────────────────────────────────────────────────┐`
`│` {width}                                                      number or nil `│`
`├────────────────────────────────────────────────────────────────────────────┘`

Chnages the width of the list. It only works when the {style} is `list`. When
the value is smaller than 1 it is considered a % value

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
		components = {
			{
			  type = "recents",
				entryCount = 1,
				width = 0.8
			}
		}
	})
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `────────────────────────────────────────────────────────────────────╮`
`│`                                                                            `│`
`│`                                                                            `│`
`│`        file.txt                                                   1        `│`
`│`                                                                            `│`
`│`                                                                            `│`
`╰────────────────────────────────────────────────────────────────────────────╯`

When the value is larger than 1 it is directly used as the width. However, if
the value is smaller than 1 then it is used as % value. So, 0.8 means the
width will be 80% of the window width.

By default the width is set to 60% of window width.

`├────────────────────────────────────────────────────────────────────────────┐`
`│` {useIcons}                                                  boolean or nil `│`
`├────────────────────────────────────────────────────────────────────────────┘`

Enable/Disable the usage of `filetype` icons. This will also add colors to the
icons. This requires `nvim-web-devicons` and a `nerd font` to work.

By default, it is disabled.

`├────────────────────────────────────────────────────────────────────────────┐`
`│` {useAnchors}                                                boolean or nil `│`
`├────────────────────────────────────────────────────────────────────────────┘`

Controls the preview of `file` `paths`. When set to `true`, if the cursor is
placed on an entry you will see the full path on the bottom left of the
window.

By default, it is enabled.

`├────────────────────────────────────────────────────────────────────────────┐`
`│` {colors}                                            string or table or nil `│`
`├────────────────────────────────────────────────────────────────────────────┘`

Changes the coloring of various parts of the entries. You can change the
coloring of the file `names`, the entry `number` and the spaces between them
if it is a list.

If the vlue is a `string` it is applied to all the lines. If it's a `table` it
is applied based on the `entries` index. If an entry has a no color for it
the last value in the table is used.

You can also add gradients too if you want.

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
		components = {
			{
			  type = "recents",
				entryCount = 5,
				width = 0.8,

				colors = {
					-- A string value
					name = "hl_1",

					-- A table value
					number = {
						"hl_1", "hl_2", "hl_3"
					},

					-- A gradient
					whiteSpace = {
						{ "hl_1", "hl_2", "hl_3" }
					}
				}
			}
		}
	})
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `────────────────────────────────────────────────────────────────────╮`
`│`////////////////////////////////////////////////////////////////////////////`│`
`│`////////////////////////////////////////////////////////////////////////////`│`
`│`////////////////////////////////////////////////////////////////////////////`│`
`│`/////////////////////////// Preview Unavailable ////////////////////////////`│`
`│`////////////////////////////////////////////////////////////////////////////`│`
`│`////////////////////////////////////////////////////////////////////////////`│`
`│`////////////////////////////////////////////////////////////////////////////`│`
`╰────────────────────────────────────────────────────────────────────────────╯`


The {colors} table has 3 options inside it. These are {name}, {number} and
{whiteSpace}.

{name} changes the color of file names, {number} changes the entry count's
color and {whiteSpace} changes the color of the spaces between various parts.

`├────────────────────────────────────────────────────────────────────────────┐`
`│` {gradientRepeat}                                   boolean or table or nil `│`
`├────────────────────────────────────────────────────────────────────────────┘`

Controls whether `gradients` are repeated or not. This component uses
`secondaryColors` under the hood so just setting it to `true`/`false` is
enough.

You can also set it differently for all the lines by using a table if you
like. If an entry has no value for it the last item in the list is used.

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
				type = "recents",
				entryCount = 2,
				colors = {
					name = { "FILL", "Normal" },
				},
				gradientRepeat = {
					true,
					false
				}
			},
    },

		globalHighlights = {
			FILL = { bg = "#FFFFFF", fg = "#FFFFFF" },
		}
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `────────────────────────────────────────────────────────────────────╮`
`│`                                                                            `│`
`│`                                                                            `│`
`│`       █i█e█a█e█t█t                                                 1       `│`
`│`       █ilename_2.txt                                               2       `│`
`│`                                                                            `│`
`│`                                                                            `│`
`╰────────────────────────────────────────────────────────────────────────────╯`


`╭──────────────────────────────────────────────────────` *intro.nvim-c-keymaps* `╮`
`│` 🎴 Component: Keymaps                                                   `⌨️ │`
`╰────────────────────────────────────────────────────────────────────────────╯`

This component allows you to set up `keymaps` for the `start` `screen`.

This components has the following `sub options`,
	{style}                `Changes the look of the component`
	{gaps}                 `Characters to use as seperators`
	{itemLimit}            `Number of items to put in one line`
	{width}                `Width of the list`
	{gradientRepeat}       `Gradient repeat related options`
	{keys}                 `Keymaps`

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
			  type = "keymaps",
				keys = {
					{
						keyCombination = "<Space>t",
						keyAction = ":lua print('Hello World');<CR>",
						text = "[T]est"
					}
				}
			}
    }
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `────────────────────────────────────────────────────────────────────╮`
`│                                                                            │`
`│                                                                            │`
`│`                                   [T]est                                   `│`
`│                                                                            │`
`│                                                                            │`
`╰────────────────────────────────────────────────────────────────────────────╯`

Properties ~
`├────────────────────────────────────────────────────────────────────────────┐`
`│` {style}                                                      string or nil `│`
`├────────────────────────────────────────────────────────────────────────────┘`

Chnages how the `Keymaps` are shown. You can have them look like a list. Or
you can also show them as columns in 1 or multiple lines.

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
			  type = "keymaps",
				style = "list", -- or "compact"
				keys = {
					{
						keyCombination = "<Space>t",
						keyAction = ":lua print('Hello World');<CR>",
						text = "[T]est"
					},
					{
						keyCombination = "<Space>m",
						keyAction = ":messages<CR>",
						text = "[M]essages"
					},
					{
						keyCombination = "<Space>?",
						keyAction = ":h intro.nvim;<CR>",
						text = "[H]elp"
					}
				}
			}
    }
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `─────────────────────────────┯──────────────────────────────────────╮`
`│                      style = "list" │                    style = "compact" │`
`│                                     │                                      │`
`│                                     │                                      │`
`│`             [T]ext                  `│`                                      `│`
`│`           [M]essages                `│`     [T]est   [M]essages   [H]elp     `│`
`│`             [H]elp                  `│`                                      `│`
`│                                     │                                      │`
`│                                     │                                      │`
`│                                     │                                      │`
`╰─────────────────────────────────────┷──────────────────────────────────────╯`

`├────────────────────────────────────────────────────────────────────────────┐`
`│` {gaps}                                                       string or nil `│`
`├────────────────────────────────────────────────────────────────────────────┘`

Separator to put between `columns`. It has no effect if {style} is set to
`list`.

Default value is 3 spaces("   ");

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
			  type = "keymaps",
				style = "compact",
				gaps = " ║ ",
				keys = {
					{
						keyCombination = "<Space>t",
						keyAction = ":lua print('Hello World');<CR>",
						text = "[T]est"
					},
					{
						keyCombination = "<Space>m",
						keyAction = ":messages<CR>",
						text = "[M]essages"
					},
					{
						keyCombination = "<Space>?",
						keyAction = ":h intro.nvim;<CR>",
						text = "[H]elp"
					}
				}
			}
    }
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `────────────────────────────────────────────────────────────────────╮`
`│                                                                            │`
`│                                                                            │`
`│`                        [T]est ║ [M]essages ║ [H]elp                        `│`
`│                                                                            │`
`│                                                                            │`
`╰────────────────────────────────────────────────────────────────────────────╯`

`├────────────────────────────────────────────────────────────────────────────┐`
`│` {itemLimit}                                                  number or nil `│`
`├────────────────────────────────────────────────────────────────────────────┘`

Maximum number of item to show in a single line. It has no effect if {style}
is set to `list`.

Default is `3`.

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
			  type = "keymaps",
				style = "compact",
				gaps = " ║ ",
				itemLimit = 2,
				keys = {
					{
						keyCombination = "<Space>t",
						keyAction = ":lua print('Hello World');<CR>",
						text = "[T]est"
					},
					{
						keyCombination = "<Space>m",
						keyAction = ":messages<CR>",
						text = "[M]essages"
					},
					{
						keyCombination = "<Space>?",
						keyAction = ":h intro.nvim;<CR>",
						text = "[H]elp"
					}
				}
			}
    }
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `────────────────────────────────────────────────────────────────────╮`
`│                                                                            │`
`│                                                                            │`
`│`                             [T]est ║ [M]essages                            `│`
`│`                                  [H]elp                                    `│`
`│                                                                            │`
`│                                                                            │`
`╰────────────────────────────────────────────────────────────────────────────╯`

`├────────────────────────────────────────────────────────────────────────────┐`
`│` {width}                                                      number or nil `│`
`├────────────────────────────────────────────────────────────────────────────┘`

The width of the list. It has no effect if {style} is set to `compact`.

It has no `default` value.

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
		components = {
			{
			  type = "keymaps",
				style = "list",
				width = 0.8,
				itemLimit = 2,
				keys = {
					{
						keyCombination = "<Space>?",
						keyAction = ":h intro.nvim;<CR>",
						text = "[H]elp"
					}
				}
			}
		}
	})
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `────────────────────────────────────────────────────────────────────╮`
`│`                                                                            `│`
`│`                                                                            `│`
`│`        [H]elp                                                              `│`
`│`                                                                            `│`
`│`                                                                            `│`
`╰────────────────────────────────────────────────────────────────────────────╯`

`├────────────────────────────────────────────────────────────────────────────┐`
`│` {gradientRepeat}                                   boolean or table or nil `│`
`├────────────────────────────────────────────────────────────────────────────┘`

Controls whether `gradients` are repeated or not. This component uses
`secondaryColors` under the hood so just setting it to `true`/`false` is
enough.

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
				type = "keymaps",
				style = "list",
				width = 0.8,
				gradientRepeat = true,
				keys = {
					{
						keyCombination = "<Space>m",
						keyAction = ":messages<CR>",
						text = { "[M]essages" },
            color = { { "Fill", "Normal" } }
					},
				}
			},
    },

		globalHighlights = {
			FILL = { bg = "#FFFFFF", fg = "#FFFFFF" },
		}
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `────────────────────────────────────────────────────────────────────╮`
`│`                                                                            `│`
`│`                                                                            `│`
`│`       █M█e█s█g█s                                                           `│`
`│`                                                                            `│`
`│`                                                                            `│`
`╰────────────────────────────────────────────────────────────────────────────╯`


`├────────────────────────────────────────────────────────────────────────────┐`
`│` {keys}                                                               table `│`
`├────────────────────────────────────────────────────────────────────────────┘`

Define all your `keymaps` and what to show on the screen here.

This component has the following `sub options`,
	{keyCombination}        `Key combination for a keymap`
	{keyAction}             `The command to run`
	{keyOptions}            `Options for the keymap`
	{text}                  `The text to show`
	{color}                 `The color to use`

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
				type = "keymaps",
				style = "list",
				width = 0.8,
				gradientRepeat = true,
				keys = {
					{
						keyCombination = "<Space>m",
						keyAction = ":messages<CR>",
						text = { "[M]essages" },
            color = { { "Fill", "Normal" } }
					},
				}
			},
    },

		globalHighlights = {
			FILL = { bg = "#FFFFFF", fg = "#FFFFFF" },
		}
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`

`├╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶┐`
`│` {keyCombination}                                                    string `│`
`├╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶┘`

Key combination for a `keymap`. It is directly sent to `nvim_buf_set_keymap()`.

`├╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶┐`
`│` {keyAction}                                                         string `│`
`├╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶┘`

The command to run when the `keymap` is triggered. It is directly sent to
`nvim_buf_set_keymap()`.

`├╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶┐`
`│` {keyOptions}                                                  table or nil `│`
`├╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶┘`

Keymap options. It is directly sent to `nvim_buf_set_keymap()`.

The default value is `{ silent = true }`

`├╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶┐`
`│` {text}                                              string or table or nil `│`
`├╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶┘`

The text that will be shown in the buffer.

Use a `string` value if you want to use a `single` color. Or a `table` value
if you want to use a `gradient`.

`├╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶┐`
`│` {color}                                             string or table or nil `│`
`├╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶┘`

The highlight group that will be used to color the text.

`╭` NOTE `──────────────────────────────────────────────────────────────────────╮`
`│` It is `color`, NOT `colors`.                                                   `│`
`╰────────────────────────────────────────────────────────────────────────────╯`

Usage ~
`╭` Lua `───────────────────────────────────────────────────────────────────────╮`
>
  require("intro").setup({
    components = {
			{
				type = "keymaps",
				style = "list",
				width = 0.8,
				gradientRepeat = true,
				keys = {
					{
						keyCombination = "<Space>e",
						keyAction = ":messages clear<CR>",

						-- If the text is a string.
						-- The component expects it to be colored with a single
						-- color
						text = "[E]mpty messages",
            color = "Normal"
					},
					{
						keyCombination = "<Space>m",
						keyAction = ":messages<CR>",

						-- If the text is a table.
						-- The component expects it to have both solid & gradient
						-- colors in it.
						-- The colors are set using `secondaryColors` so the 
						-- usage is the same
						--
						-- Gradients are tables inside tables.
						text = { "[M]essages" },
            color = { { "Fill", "Normal" } }
					},
					{
						keyCombination = "<Space>?",
						keyAction = ":h intro.nvim<CR>",

						-- This will color [H] with "FILL" & elp with "Normal"
						text = { "[H]", "elp" },
            color = { "Fill", "Normal" }
					}
				}
			},
    },

		globalHighlights = {
			FILL = { bg = "#FFFFFF", fg = "#FFFFFF" },
		}
  })
<
`╰────────────────────────────────────────────────────────────────────────────╯`
`╭` Neovim `────────────────────────────────────────────────────────────────────╮`
`│`                                                                            `│`
`│`                                                                            `│`
`│`       [E]mpty messages                                                     `│`
`│`       █M█e█s█g█s                                                           `│`
`│`       ███elp                                                               `│`
`│`                                                                            `│`
`│`                                                                            `│`
`╰────────────────────────────────────────────────────────────────────────────╯`



`─────────────────────────────────────────────────────────────────────────────┤`
vim:tw=78:ts=2:noet:ft=help:norl:
